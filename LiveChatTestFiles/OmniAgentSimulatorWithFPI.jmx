<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="AgentSimulator" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Agent Simulator Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="AgentConfigData" enabled="true">
          <stringProp name="filename">D:\LiveChatTestFiles\C1InputConfigData_Production.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Ocp-Apim-Subscription-Key" elementType="Argument">
              <stringProp name="Argument.name">Ocp-Apim-Subscription-Key</stringProp>
              <stringProp name="Argument.value">&quot;&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ocTokenCheck" elementType="Argument">
              <stringProp name="Argument.name">ocTokenCheck</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="HeartbeatDuration" elementType="Argument">
              <stringProp name="Argument.name">HeartbeatDuration</stringProp>
              <stringProp name="Argument.value">30000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="HeartbeatTimestamp" elementType="Argument">
              <stringProp name="Argument.name">HeartbeatTimestamp</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ReadySessionId" elementType="Argument">
              <stringProp name="Argument.name">ReadySessionId</stringProp>
              <stringProp name="Argument.value">&quot;&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="EnableReject" elementType="Argument">
              <stringProp name="Argument.name">EnableReject</stringProp>
              <stringProp name="Argument.value">False</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="origin" elementType="Argument">
              <stringProp name="Argument.name">origin</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T3Id" elementType="Argument">
              <stringProp name="Argument.name">T3Id</stringProp>
              <stringProp name="Argument.value">&quot;&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testRunId" elementType="Argument">
              <stringProp name="Argument.name">testRunId</stringProp>
              <stringProp name="Argument.value">${__P(testRunId,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SkypeTokenRefreshDuration" elementType="Argument">
              <stringProp name="Argument.name">SkypeTokenRefreshDuration</stringProp>
              <stringProp name="Argument.value">1800000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MockIC3" elementType="Argument">
              <stringProp name="Argument.name">MockIC3</stringProp>
              <stringProp name="Argument.value">${__P(MockIC3,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SendHeartbeat" elementType="Argument">
              <stringProp name="Argument.name">SendHeartbeat</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SendHeartbeatTime" elementType="Argument">
              <stringProp name="Argument.name">SendHeartbeatTime</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SendMessageWaitTime" elementType="Argument">
              <stringProp name="Argument.name">SendMessageWaitTime</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UseSignalR" elementType="Argument">
              <stringProp name="Argument.name">UseSignalR</stringProp>
              <stringProp name="Argument.value">${__P(UseSignalR,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Initialize session map" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import NotificationsQueue;
import Notification;

vars.put(&quot;testRunId&quot;,&quot;${__P(testRunId,)}&quot;);
vars.put(&quot;MockIC3&quot;,&quot;${__P(MockIC3,)}&quot;);
vars.put(&quot;UseSignalR&quot;,&quot;${__P(UseSignalR,)}&quot;);
//vars.put(&quot;testRunId&quot;,&quot;2019-08-02T23:50:00&quot;);
//vars.put(&quot;MockIC3&quot;,&quot;false&quot;);
vars.put(&quot;HeartbeatDuration&quot;, &quot;${HeartbeatDuration}&quot;);
vars.put(&quot;HeartbeatTimestamp&quot;, &quot;0&quot;);
vars.put(&quot;T3Id&quot;, &quot;19:${AgentAdId}_${BotId}&quot;);
vars.put(&quot;LastSkypeTokenRefresh&quot;, &quot;0&quot;);
vars.put(&quot;TokenExpired&quot;, &quot;true&quot;);
vars.put(&quot;AgentLoggedIn&quot;, &quot;false&quot;);
vars.put(&quot;SessionActiveTime&quot;, &quot;${__P(SessionActiveTime,)}&quot;);
vars.put(&quot;SendMessageEnabled&quot;, &quot;${__P(SendMessageEnabled,)}&quot;);
vars.put(&quot;MessagingToken&quot;, &quot;${ACSMessagingToken}&quot;);

//These message limits are used in mapping below
vars.put(&quot;MessageLimit&quot;, &quot;${__P(MessageLimit,)}&quot;);
vars.put(&quot;SMSLimit&quot;, &quot;${__P(SMSLimit,)}&quot;);
vars.put(&quot;CustomMessagingLimit&quot;, &quot;${__P(CustomMessagingLimit,)}&quot;);
vars.put(&quot;LiveChatV2Limit&quot;, &quot;${__P(LiveChatV2Limit,)}&quot;);
vars.put(&quot;FacebookLimit&quot;, &quot;10&quot;); // TODO: facebook limit set default to 10 as we are not passing this parameter yet
vars.put(&quot;TelephonyMessagingLimit&quot;, &quot;${__P(TelephonyMessagingLimit,)}&quot;);
vars.put(&quot;RejectFreq&quot;, &quot;${__P(RejectFreq,)}&quot;);
vars.put(&quot;TimeoutFreq&quot;, &quot;${__P(TimeoutFreq,)}&quot;);
vars.put(&quot;TransferFreq&quot;, &quot;${__P(TransferFreq,)}&quot;);
vars.put(&quot;TransferToQFreq&quot;, &quot;${__P(TransferToQFreq,)}&quot;);
//vars.put(&quot;SessionActiveTime&quot;, &quot;300000&quot;);
//vars.put(&quot;SendMessageEnabled&quot;, &quot;true&quot;);
//vars.put(&quot;MessageLimit&quot;, &quot;2&quot;);
vars.put(&quot;EndpointGuid&quot;, &quot;${__UUID()}&quot;);
long loginTime = ${__time(,)};
long duration = 1000; //in millisec
long sessionActiveTime = ${SessionActiveTime};
//long duration = 3600; //in millisec
//long sessionActiveTime = 300000;

vars.put(&quot;LoginTime&quot;, loginTime.toString());
vars.put(&quot;AgentDuration&quot;, duration.toString());

// channel id -&gt; message limit var name for that channel
// for live chat channel id is empty string
// these mapping are used in &quot;channelid&quot; in &quot;GetAllSessionsFromLongPollResponse&quot; under Receive Message
vars.put(&quot;lcw&quot;, &quot;MessageLimit&quot;);
vars.put(&quot;sms&quot;, &quot;SMSLimit&quot;);
vars.put(&quot;facebook&quot;, &quot;FacebookLimit&quot;);
vars.put(&quot;custom&quot;, &quot;CustomMessagingLimit&quot;);
vars.put(&quot;Chat&quot;, &quot;LiveChatV2Limit&quot;);
vars.put(&quot;phonecall&quot;, &quot;TelephonyMessagingLimit&quot;);

log.info(&quot;SessionActiveTime: &quot; +  vars.get(&quot;SessionActiveTime&quot;));
log.info(&quot;SendMessageEnabled: &quot; +  vars.get(&quot;SendMessageEnabled&quot;));
log.info(&quot;MessageLimit: &quot; +  vars.get(&quot;MessageLimit&quot;));
log.info(&quot;LoginTime: &quot; +  vars.get(&quot;LoginTime&quot;));
log.info(&quot;AgentDuration: &quot; +  vars.get(&quot;AgentDuration&quot;));
log.info(&quot;MessagingToken: &quot; +  vars.get(&quot;MessagingToken&quot;));

NotificationsQueue notificationsQueue = new NotificationsQueue(sessionActiveTime);
HashMap chatIdToNotificationMap = new HashMap();

vars.putObject(&quot;notificationsQueue&quot;, notificationsQueue);
vars.putObject(&quot;chatIdToNotificationMap&quot;, chatIdToNotificationMap);


int rejectFrequency = Integer.valueOf(vars.get(&quot;RejectFreq&quot;));
int timeoutFrequency = Integer.valueOf(vars.get(&quot;TimeoutFreq&quot;));
int transferFrequency = Integer.valueOf(vars.get(&quot;TransferFreq&quot;));
int transferToQFrequency = Integer.valueOf(vars.get(&quot;TransferToQFreq&quot;));

ActionDecider ad = new ActionDecider(rejectFrequency, timeoutFrequency, transferFrequency, transferToQFrequency);
vars.putObject(&quot;actionDecider&quot;, ad);







</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Retry for omnichannel token" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;octokencounter&quot;) &lt;= 5 &amp;&amp; vars.get(&quot;GetOcTokenResponse&quot;) != &quot;200&quot;)}</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">6</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">octokencounter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">client-request-id</stringProp>
                  <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract access token" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ocToken</stringProp>
              <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Update OC Token variable" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">if(vars.get(&quot;ocToken&quot;) != null )
{
	vars.put(&quot;ocTokenCheck&quot;, &quot;1&quot;);
}
else
{
	log.info(&quot;Get Oc Token Failed&quot;);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OC Token Call Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">GetOcTokenResponse</stringProp>
              <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ACS Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cbb/getacsauthtoken</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">OrganizationId</stringProp>
                  <stringProp name="Header.value">${OrgId}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TenantId</stringProp>
                  <stringProp name="Header.value">${TenantId}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ADUserId</stringProp>
                  <stringProp name="Header.value">${AgentAdId}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Ocp-Apim-Trace</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Ocp-Apim-Subscription-Key</stringProp>
                  <stringProp name="Header.value">${Ocp-Apim-Subscription-Key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-AadToken</stringProp>
                  <stringProp name="Header.value">${aadToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ACSToken  Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">acsToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ACSUserId Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AgentACSUserId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;acsUserId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCTokenTelemetry Call" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;get_agent_oc_token&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${GetOcTokenResponse}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">telemetry</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;GetOcTokenResponse&quot;) == &quot;200&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Agent OC Login" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AgentLoginIntoOmniChannel" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AgentId&quot;:&quot;${AgentId}&quot;,&#xd;
    &quot;ClientSessionId&quot;:&quot;${AgentId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">presence/AgentLogin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">OrganizationId</stringProp>
                    <stringProp name="Header.value">${OrgId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">TenantId</stringProp>
                    <stringProp name="Header.value">${TenantId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AgentAdId</stringProp>
                    <stringProp name="Header.value">${AgentAdId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Ocp-Apim-Trace</stringProp>
                    <stringProp name="Header.value">true</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin </stringProp>
                    <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Agent Login Call Status" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">AgentLoginResponse</stringProp>
                <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TransactionIdLogin</stringProp>
                <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Updated Agent logged In" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">if(vars.get(&quot;AgentLoginResponse&quot;) == &quot;200&quot;)
{
	vars.put(&quot;AgentLoggedIn&quot;, &quot;true&quot;);
}

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Login telemetry call" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;agent_login&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${TransactionIdLogin}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${AgentLoginResponse}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">localhost</stringProp>
              <stringProp name="HTTPSampler.port">3000</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">telemetry</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Agent Heartbeat first Call" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;AgentId&quot;:&quot;${AgentId}&quot;,&#xd;
    &quot;ClientSessionId&quot;:&quot;${AgentId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">presence/SendHeartbeat</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Agent Heartbeat API Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">OrganizationId</stringProp>
                    <stringProp name="Header.value">${OrgId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">TenantId</stringProp>
                    <stringProp name="Header.value">${TenantId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">AgentAdId</stringProp>
                    <stringProp name="Header.value">${AgentAdId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Agent Heartbeat call Status Code Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">HeartbeatStatus</stringProp>
                <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update Heartbeat counter" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">if(vars.get(&quot;HeartbeatStatus&quot;) == &quot;200&quot;)
{
	vars.put(&quot;HeartbeatTimestamp&quot;, ${__time(,)}.toString())
}

log.info(&quot;HeartBeatStatus: &quot; + vars.get(&quot;HeartbeatStatus&quot;));</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">TransactionIdHeartbeat</stringProp>
                <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Heartbeat telemetry call" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;agent_heartbeat&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${TransactionIdHeartbeat}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${HeartbeatStatus}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">localhost</stringProp>
              <stringProp name="HTTPSampler.port">3000</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">telemetry</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check for OC Login" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;HeartbeatStatus&quot;) == &quot;200&quot; || vars.get(&quot;HeartbeatStatus&quot;) == &quot;204&quot; || vars.get(&quot;HeartbeatStatus&quot;) == &quot;201&quot; || vars.get(&quot;HeartbeatStatus&quot;) == &quot;202&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Make IC3 calls if mock is disabled" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;MockIC3&quot;) == &quot;false&quot; &amp;&amp; vars.get(&quot;UseSignalR&quot;) == &quot;false&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Get Skype AAD Token" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAADToken" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">resource=https%3A%2F%2Fapi.spaces.skype.com&amp;client_id=${skypeclientid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${TenantId}/oauth2/token</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract AAD Token" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">aadToken</stringProp>
                    <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="AAD Token Call Status Code Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">AADTokenStatus</stringProp>
                    <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get AAD token telemetry call" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;get_aad_token&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${AADTokenStatus}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">localhost</stringProp>
                  <stringProp name="HTTPSampler.port">3000</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">telemetry</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkypeTokenFromCBB" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;TenantId&quot; : &quot;${TenantId}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/cbb/getauthtoken</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">OrganizationId</stringProp>
                        <stringProp name="Header.value">${OrgId}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">TenantId</stringProp>
                        <stringProp name="Header.value">${TenantId}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">AgentAdId</stringProp>
                        <stringProp name="Header.value">${AgentAdId}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Ocp-Apim-Trace</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Ocp-Apim-Subscription-Key</stringProp>
                        <stringProp name="Header.value">${Ocp-Apim-Subscription-Key}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-AadToken</stringProp>
                        <stringProp name="Header.value">${aadToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SkypeToken  Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                    <stringProp name="RegexExtractor.refname">skypeToken</stringProp>
                    <stringProp name="RegexExtractor.regex">skypeToken&quot;:&quot;(.+?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SkypeTokenAuthUrl Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">SkypeTokenAuthUrl</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;ams&quot;:&quot;https://(.+?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ProdURL Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">PRODUrl</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;chatService&quot;:&quot;https://(.+?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Skype Token Status Code Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">SkypeTokenStatus</stringProp>
                    <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Skype token telemetry call" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;get_skype_token_cbb&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${SkypeTokenStatus}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">localhost</stringProp>
                  <stringProp name="HTTPSampler.port">3000</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">telemetry</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check if AAD token token is recieved" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;PRODUrl&quot;) != null)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SkypeTokenAuth" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">skypetoken=${skypeToken}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${SkypeTokenAuthUrl}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">v1/skypetokenauth</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">skype_token  ${skypeToken}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Retry for registration token" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;counter&quot;) &lt;= 5 &amp;&amp; vars.get(&quot;RegistrationTokenStatus&quot;) != &quot;201&quot;)}</stringProp>
                </WhileController>
                <hashTree>
                  <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                    <stringProp name="CounterConfig.start">1</stringProp>
                    <stringProp name="CounterConfig.end">6</stringProp>
                    <stringProp name="CounterConfig.incr">1</stringProp>
                    <stringProp name="CounterConfig.name">counter</stringProp>
                    <stringProp name="CounterConfig.format"></stringProp>
                    <boolProp name="CounterConfig.per_user">true</boolProp>
                    <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                  </CounterConfig>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateEndpointAndGetRegistrationToken ${counter}" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;endpointFeatures&quot;:&quot;Agent,InviteFree,MessageProperties&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${PRODUrl}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">v1/users/ME/endpoints</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authentication</stringProp>
                          <stringProp name="Header.value">skypetoken=${skypeToken}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">BehaviorOverride</stringProp>
                          <stringProp name="Header.value">redirectAs404</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ExtractRegistrationToken" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">RegistrationToken</stringProp>
                      <stringProp name="RegexExtractor.regex">Set-RegistrationToken:(.+?)\n</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Registration Token Status Code Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">RegistrationTokenStatus</stringProp>
                      <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update skype token refresh timestamp" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="script">vars.put(&quot;LastSkypeTokenRefresh&quot;, &quot;${__time(,)}&quot;);

log.info(&quot;LastSkypeTokenRefreshTimestamp: &quot; + vars.get(&quot;LastSkypeTokenRefresh&quot;))
vars.put(&quot;TokenExpired&quot;, &quot;false&quot;)</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Redirect Location" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">RedirectLocation</stringProp>
                      <stringProp name="RegexExtractor.regex">Location:(.+?)\n</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">/*if (vars.get(&quot;RegistrationTokenStatus&quot;) != &quot;201&quot;) {

	def url = new URL(vars.get(&quot;RedirectLocation&quot;));
	
	def host = url.getHost()
	
	log.info(&apos;Full URL: &apos; + url.toString())
	vars.put(&quot;PRODUrl&quot;, host.toString());
	log.info(&quot;RedirectURL&quot; + vars.get(&quot;RedirectLocation&quot;));
}*/

if(vars.get(&quot;RedirectLocation&quot;) != &quot;&quot;){
	def url = new URL(vars.get(&quot;RedirectLocation&quot;));
	
	def host = url.getHost()
	
	log.info(&apos;Redirect Full URL: &apos; + url.toString())
	vars.put(&quot;PRODUrl&quot;, host.toString());
	log.info(&quot;RedirectURL host&quot; + vars.get(&quot;RedirectLocation&quot;));
}


	vars.put(&quot;createEndpointURL&quot;, URLEncoder.encode(prev.getUrlAsString(), &quot;UTF-8&quot;));
	vars.put(&quot;createEndpointRequestHeader&quot;, URLEncoder.encode(prev.getRequestHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;createEndpointResponseHeader&quot;, URLEncoder.encode(prev.getResponseHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;createEndpointResponseBody&quot;, URLEncoder.encode(prev.getResponseDataAsString() , &quot;UTF-8&quot;));</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create endpoint and get reg token telemetry call" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;create_endpoint_get_reg_token&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${RegistrationTokenStatus}&quot;,&#xd;
	&quot;attemptsMade&quot;:&quot;${counter}&quot;,&#xd;
	&quot;url&quot;:&quot;${createEndpointURL}&quot;,&#xd;
	&quot;requestHeader&quot;:&quot;${createEndpointRequestHeader}&quot;,&#xd;
	&quot;responseHeader&quot;:&quot;${createEndpointResponseHeader}&quot;,&#xd;
	&quot;responseBody&quot;:&quot;${createEndpointResponseBody}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">localhost</stringProp>
                  <stringProp name="HTTPSampler.port">3000</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">telemetry</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Subscribe if endpoint creation succeeded" enabled="true">
                  <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;RegistrationTokenStatus&quot;) == &quot;201&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubscribeToAll" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;channeltype&quot;:&quot;httpLongPoll&quot;,&#xd;
	&quot;interestedResources&quot;:[&#xd;
		&quot;/v1/users/ME/conversations/ALL/properties&quot;,&#xd;
		&quot;/v1/users/ME/conversations/ALL/messages&quot;,&#xd;
		&quot;/v1/threads/ALL&quot;,&quot;/v1/users/ME/contacts/ALL&quot;&#xd;
	]&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${PRODUrl}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">v1/users/ME/endpoints/SELF/subscriptions</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">RegistrationToken</stringProp>
                          <stringProp name="Header.value">${RegistrationToken}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="script">if (prev.getResponseCode().equals(&quot;201&quot;)) {
	vars.put(&quot;SubRecv&quot;, &quot;201&quot;);
}

	vars.put(&quot;subscribeCallURL&quot;, URLEncoder.encode(prev.getUrlAsString(), &quot;UTF-8&quot;));
	vars.put(&quot;subscribeCallRequestHeader&quot;, URLEncoder.encode(prev.getRequestHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;subscribeCallResponseHeader&quot;, URLEncoder.encode(prev.getResponseHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;subscribeCallResponseBody&quot;, URLEncoder.encode(prev.getResponseDataAsString() , &quot;UTF-8&quot;));</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="subscribe to all  telemetry call" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;subscribe_to_all&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${RegistrationTokenStatus}&quot;,&#xd;
	&quot;url&quot;:&quot;${subscribeCallURL}&quot;,&#xd;
	&quot;requestHeader&quot;:&quot;${subscribeCallRequestHeader}&quot;,&#xd;
	&quot;responseHeader&quot;:&quot;${subscribeCallResponseHeader}&quot;,&#xd;
	&quot;responseBody&quot;:&quot;${subscribeCallResponseBody}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">localhost</stringProp>
                    <stringProp name="HTTPSampler.port">3000</stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">telemetry</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Set endpoint If mock is false" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;MockIC3&quot;) == &quot;false&quot; &amp;&amp; vars.get(&quot;UseSignalR&quot;) == &quot;false&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set endpoints and paths for long poll" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">if(vars.get(&quot;MockIC3&quot;) == &quot;true&quot;) {
	vars.put(&quot;PRODUrl&quot;, vars.get(&quot;apimpath&quot;));
	vars.put(&quot;LongPollingMethod&quot;, &quot;GET&quot;);
	vars.put(&quot;PollPath&quot;, vars.get(&quot;MockLongPollPath&quot;) + vars.get(&quot;AgentAdId&quot;));	
}
else {
	try {
		//log.info(&quot;MockIC3 = false&quot;);
		vars.put(&quot;PRODUrl&quot;, vars.get(&quot;PRODUrl&quot;));
		//log.info(&quot;PRODUrl okay&quot;);
		vars.put(&quot;LongPollingMethod&quot;, &quot;POST&quot;);
		//log.info(&quot;LongPollingMethod okay&quot;);
		vars.put(&quot;PollPath&quot;, vars.get(&quot;LongPollPath&quot;));
		//log.info(&quot;PollPath okay&quot;);
	}
	catch (Exception ex) {
		// do nothing
	}
}
</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Parallel Calls" enabled="true">
              <boolProp name="PARENT_SAMPLE">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Heartbeat While" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;SendHeartbeat&quot;) == &quot;1&quot;)}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Agent Heartbeat " enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
    &quot;AgentId&quot;:&quot;${AgentId}&quot;,&#xd;
    &quot;ClientSessionId&quot;:&quot;${AgentId}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">presence/SendHeartbeat</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="timestamp of heartbeat call send" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.util.Date;

SimpleDateFormat istFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;);
SimpleDateFormat gmtFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;);
TimeZone gmtTime = TimeZone.getTimeZone(&quot;GMT&quot;);
TimeZone istTime = TimeZone.getTimeZone(&quot;IST&quot;); 
istFormat.setTimeZone(istTime);
gmtFormat.setTimeZone(gmtTime); 

String startDate = &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}&quot;
Date startDateAsDate= istFormat.parse(startDate);
vars.put(&quot;SendHeartbeatTime&quot;, startDate);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status Code Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">HeartbeatStatusLoop</stringProp>
                    <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update Heartbeat counter" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">if(vars.get(&quot;HeartbeatStatusLoop&quot;) == &quot;200&quot;)
{
	vars.put(&quot;HeartbeatTimestamp&quot;, ${__time(,)}.toString())
}

log.info(&quot;HeartBeatStatus: &quot; + vars.get(&quot;HeartbeatStatusLoop&quot;));</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">TransactionIdHeartbeat</stringProp>
                    <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">OrganizationId</stringProp>
                        <stringProp name="Header.value">${OrgId}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">TenantId</stringProp>
                        <stringProp name="Header.value">${TenantId}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">AgentAdId</stringProp>
                        <stringProp name="Header.value">${AgentAdId}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Ocp-Apim-Trace</stringProp>
                        <stringProp name="Header.value">true</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                    <collectionProp name="CookieManager.cookies"/>
                    <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                  </CookieManager>
                  <hashTree/>
                  <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
                    <boolProp name="clearEachIteration">false</boolProp>
                    <boolProp name="useExpires">true</boolProp>
                  </CacheManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Heartbeat retry telemetry call" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;agent_heartbeat&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${TransactionIdHeartbeat}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;SendHeartbeatTime&quot;:&quot;${SendHeartbeatTime}&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${HeartbeatStatusLoop}&quot;,&#xd;
	&quot;LastHeartbeatBefore&quot;: &quot;${LastHeartbeatBefore}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">localhost</stringProp>
                  <stringProp name="HTTPSampler.port">3000</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">telemetry</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check for OC Token Retry" enabled="true">
                  <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;HeartbeatStatusLoop&quot;) != &quot;200&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken Retry" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid&amp;client_secret=${clientsecret}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="OC Token HTTP Cookie" enabled="true">
                      <collectionProp name="CookieManager.cookies"/>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="OC Token HTTP Header" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">client-request-id</stringProp>
                          <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract OC Token" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">ocToken</stringProp>
                      <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Agent Heartbeat Retry" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
    &quot;AgentId&quot;:&quot;${AgentId}&quot;,&#xd;
    &quot;ClientSessionId&quot;:&quot;${AgentId}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">presence/SendHeartbeat</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="timestamp of heartbeat call send" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.util.Date;

SimpleDateFormat istFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;);
SimpleDateFormat gmtFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;);
TimeZone gmtTime = TimeZone.getTimeZone(&quot;GMT&quot;);
TimeZone istTime = TimeZone.getTimeZone(&quot;IST&quot;); 
istFormat.setTimeZone(istTime);
gmtFormat.setTimeZone(gmtTime); 

String startDate = &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}&quot;
Date startDateAsDate= istFormat.parse(startDate);
vars.put(&quot;SendHeartbeatTime&quot;, startDate);</stringProp>
                    </JSR223PreProcessor>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">OrganizationId</stringProp>
                          <stringProp name="Header.value">${OrgId}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">TenantId</stringProp>
                          <stringProp name="Header.value">${TenantId}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">AgentAdId</stringProp>
                          <stringProp name="Header.value">${AgentAdId}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Ocp-Apim-Trace</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">no-cache</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Response Code" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">HeartbeatStatusRetry</stringProp>
                      <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update Heartbeat counter" enabled="true">
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">if(vars.get(&quot;HeartbeatStatusRetry&quot;) == &quot;200&quot;)
{	
	vars.put(&quot;HeartbeatTimestamp&quot;, ${__time(,)}.toString())
}
log.info(&quot;HeartbeatStatus : &quot; + vars.get(&quot;HeartbeatStatusRetry&quot;));</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                      <stringProp name="RegexExtractor.refname">TransactionIdHeartbeat</stringProp>
                      <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">OrganizationId</stringProp>
                          <stringProp name="Header.value">${OrgId}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">TenantId</stringProp>
                          <stringProp name="Header.value">${TenantId}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">AgentAdId</stringProp>
                          <stringProp name="Header.value">${AgentAdId}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Ocp-Apim-Trace</stringProp>
                          <stringProp name="Header.value">true</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">no-cache</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                      <collectionProp name="CookieManager.cookies"/>
                      <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                    </CookieManager>
                    <hashTree/>
                    <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
                      <boolProp name="clearEachIteration">false</boolProp>
                      <boolProp name="useExpires">true</boolProp>
                    </CacheManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Heartbeat retry telemetry call" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;agent_heartbeat&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${TransactionIdHeartbeat}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;SendHeartbeatTime&quot;:&quot;${SendHeartbeatTime}&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${HeartbeatStatusRetry}&quot;,&#xd;
	&quot;LastHeartbeatBefore&quot;: &quot;${LastHeartbeatBefore}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">localhost</stringProp>
                    <stringProp name="HTTPSampler.port">3000</stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">telemetry</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Agent wait time" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">${HeartbeatDuration}</stringProp>
                </TestAction>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Update SendHeartbeat" enabled="true">
                  <stringProp name="BeanShellSampler.query">try
{
	long loginTime = Long.parseLong(vars.get(&quot;LoginTime&quot;))/1000;
	String currentTime = String.valueOf(${__time(/1000,)});
	long currentTimeL = Long.parseLong(currentTime);
	long loginDuration = currentTimeL - loginTime;
	long hearbeatSentTime = Long.parseLong(vars.get(&quot;HeartbeatTimestamp&quot;))/1000;	
	long runDuration = Long.parseLong(vars.get(&quot;AgentDuration&quot;))/1000;
	long heartbeatDuration = Long.parseLong(vars.get(&quot;HeartbeatDuration&quot;))/1000;
	long timeE = currentTimeL - hearbeatSentTime;
	if(loginDuration &gt; runDuration)
	{
			vars.put(&quot;SendHeartbeat&quot;, &quot;0&quot;);
			log.info(&quot;C1 disconnected at: &quot; + String.valueOf(loginDuration));
	}
	vars.put(&quot;LastHeartbeatBefore&quot;,  String.valueOf(timeE));
}
catch (Exception ex)
{
	log.error(&quot;Error in beanshell&quot;, ex);
}
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Longpoll Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;SendHeartbeat&quot;) == &quot;1&quot;)}</stringProp>
              </WhileController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set retry variables" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">vars.put(&quot;counterRetry&quot;, &quot;0&quot;);
vars.put(&quot;CreateRetry&quot;,&quot;0&quot;);</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Receive Controller" enabled="true"/>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ProdURL flow to receive messages if UseSignalR false" enabled="true">
                    <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;UseSignalR&quot;) == &quot;false&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Receive Message" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${PRODUrl}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${PollPath}</stringProp>
                      <stringProp name="HTTPSampler.method">${LongPollingMethod}</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">RegistrationToken</stringProp>
                            <stringProp name="Header.value">${RegistrationToken}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Check If LongPoll Request was successful" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                        <stringProp name="RegexExtractor.refname">PollSuccess</stringProp>
                        <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) +?</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number"></stringProp>
                        <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">false</boolProp>
                      </RegexExtractor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetAllSessionsFromLongPollReponse" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.util.ArrayList;
import java.net.URLEncoder;
import NotificationsQueue;
import Notification;

NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);
HashMap chatIdToNotificationMap = vars.getObject(&quot;chatIdToNotificationMap&quot;);

ArrayList notificationList = new ArrayList();
String encodedresponse = &quot;&quot;;
String sessionIds = &quot;&quot;;
String dupSessionIds = &quot;&quot;;
String containsMsg = &quot;0&quot;;
String receivedMsgCsv = &quot;&quot;;
String receivedTimeCsv = &quot;&quot;;
String receivedFromCsv = &quot;&quot;;
String receivedChatIdCsv = &quot;&quot;;
if(vars.get(&quot;MockIC3&quot;) == &quot;false&quot;)
{
	String responseStr = prev.getResponseDataAsString();
	if(vars.get(&quot;PollSuccess&quot;).equals(&quot;200&quot;))
	{
		JSONParser parser = new JSONParser();
		JSONObject response = (JSONObject)parser.parse(responseStr);
		encodedresponse = URLEncoder.encode(responseStr, &quot;UTF-8&quot;);
		respLength = responseStr.length();
		
		if(response.containsKey(&quot;eventMessages&quot;))
		{	           
		  JSONArray eventMessages = (JSONArray)response.get(&quot;eventMessages&quot;);
		  for(int i=0; i&lt;eventMessages.size(); i++)
		  {       	      	
			JSONObject eventMessage = (JSONObject)eventMessages.get(i);
			if(eventMessage.containsKey(&quot;resource&quot;))
			{
				JSONObject resource = (JSONObject)eventMessage.get(&quot;resource&quot;);
				
				if(resource.containsKey(&quot;threadtype&quot;))
				{
					String threadtype = resource.get(&quot;threadtype&quot;).toString();
					if(threadtype.contentEquals(&quot;chat&quot;) &amp;&amp; resource.containsKey(&quot;content&quot;))
					{
						String contentStr = resource.get(&quot;content&quot;).toString();
						if(contentStr.startsWith(&quot;&lt;&quot;) == false)           		    
						{
							contentStr = contentStr.replace(&quot;&amp;quot;&quot;, &quot;\&quot;&quot;);
							JSONObject content = (JSONObject)parser.parse(contentStr);
							if(content.containsKey(&quot;conversationId&quot;) &amp;&amp; content.containsKey(&quot;sessionId&quot;) &amp;&amp; content.containsKey(&quot;requestType&quot;))
							{
								String sessionId = content.get(&quot;sessionId&quot;).toString();
								String chatId = content.get(&quot;conversationId&quot;).toString();
								String requestType = content.get(&quot;requestType&quot;).toString();	
								//requestType = 2 is consult; please handle it for consult scenario later
								if((requestType.equals(&quot;1&quot;) || requestType.equals(&quot;3&quot;)) &amp;&amp; (!chatIdToNotificationMap.containsKey(chatId) || chatIdToNotificationMap.get(chatId).IsInviteReceived() == false))
								{															
									String liveWorkItemId = content.get(&quot;liveWorkItemId&quot;).toString();
									String transactionId = content.get(&quot;transactionId&quot;).toString();							
									String organizationId = content.get(&quot;organizationId&quot;).toString();
									String channelId = content.get(&quot;channelId&quot;).toString();
									String conversationThreadId = content.get(&quot;conversationThreadId&quot;).toString();
		
									log.info(&quot;sessionId: &quot; +  sessionId);
									log.info(&quot;organizationId: &quot; +  organizationId);
									log.info(&quot;liveWorkItemId: &quot; +  liveWorkItemId);
									log.info(&quot;requestType: &quot; +  requestType);
									log.info(&quot;chatId: &quot; +  chatId);
									log.info(&quot;transactionId: &quot; +  transactionId);
									log.info(&quot;channelId: &quot; + channelId);
									log.info(&quot;conversationThreadId: &quot; + conversationThreadId);
	
									if(chatIdToNotificationMap.containsKey(chatId))
									{
										Notification oldNotification = chatIdToNotificationMap.get(chatId);
										oldNotification.SetContext(sessionId, liveWorkItemId, requestType, transactionId, organizationId, channelId, conversationThreadId);
										notificationList.add(oldNotification);
									}
									else
									{
										Notification newNotification = new Notification(chatId);
										newNotification.SetContext(sessionId, liveWorkItemId, requestType, transactionId, organizationId, channelId, conversationThreadId);
										notificationList.add(newNotification);
										chatIdToNotificationMap.put(chatId, newNotification);
									}
									sessionIds = sessionIds + &quot;|&quot; + sessionId;		
								}
								else
								{
									dupSessionIds = dupSessionIds + &quot;|&quot; + sessionId;
								}
							}        						
						}
					}
					else if(threadtype.contentEquals(&quot;meeting&quot;) &amp;&amp; resource.containsKey(&quot;content&quot;))
					{
						if(resource.containsKey(&quot;imdisplayname&quot;))
						{
							String imdisplayname = resource.get(&quot;imdisplayname&quot;).toString();
							if(imdisplayname.contentEquals(&quot;Customer&quot;))
							{
								String conversationLink = resource.get(&quot;conversationLink&quot;).toString();
								String chatId = conversationLink.substring(conversationLink.lastIndexOf(&apos;/&apos;) + 1);
								String content = resource.get(&quot;content&quot;).toString();
								String time = resource.get(&quot;composetime&quot;).toString();

								if(chatIdToNotificationMap.containsKey(chatId))
								{
									Notification oldNotification = chatIdToNotificationMap.get(chatId);
									oldNotification.AddReceivedMessage(content);
								}
								else
								{
									Notification newNotification = new Notification(chatId);
									newNotification.AddReceivedMessage(content);
									chatIdToNotificationMap.put(chatId, newNotification);
								}
								
								log.info(&quot;Added Message: &quot; + content + &quot; to received message list for chatid: &quot; + chatId);
		
								receivedMsgCsv = receivedMsgCsv + &quot;|&quot; + content;
								receivedTimeCsv = receivedTimeCsv + &quot;|&quot; + time;
								receivedFromCsv = receivedFromCsv + &quot;|&quot; + imdisplayname;
								receivedChatIdCsv = receivedChatIdCsv + &quot;|&quot; + chatId;
							}
						}
					}
				}
			}
		  }
		}
	}
}
else
{
	String responseStr = prev.getResponseDataAsString();
	if(vars.get(&quot;PollSuccess&quot;).equals(&quot;200&quot;))
	{
		JSONParser parser = new JSONParser();
		String responseStr2 = (String)parser.parse(responseStr);
		JSONObject response = (JSONObject)parser.parse(responseStr2);
		
		encodedresponse = URLEncoder.encode(responseStr2, &quot;UTF-8&quot;);
		respLength = responseStr.length();
		if(response.containsKey(&quot;eventMessages&quot;))
		{	           
		  JSONArray eventMessages = (JSONArray)response.get(&quot;eventMessages&quot;);
		  for(int i=0; i&lt;eventMessages.size(); i++)
		  {       	      	
		  	JSONObject eventMessage = (JSONObject)eventMessages.get(i);
		  	if(eventMessage.containsKey(&quot;content&quot;))
	  		{
				String contentStr = eventMessage.get(&quot;content&quot;).toString();
	 			if(contentStr.startsWith(&quot;&lt;&quot;) == false)           		    
	 			{
	 				contentStr = contentStr.replace(&quot;&amp;quot;&quot;, &quot;\&quot;&quot;);
	 				JSONObject content = (JSONObject)parser.parse(contentStr);
	 				if(content.containsKey(&quot;conversationId&quot;) &amp;&amp; content.containsKey(&quot;sessionId&quot;) &amp;&amp; content.containsKey(&quot;requestType&quot;))
	 				{
	 					String sessionId = content.get(&quot;sessionId&quot;).toString();
	 					String chatId = content.get(&quot;conversationId&quot;).toString();
	 					String requestType = content.get(&quot;requestType&quot;).toString();
	 					//requestType = 2 is consult; please handle it for consult scenario later
						if((requestType.equals(&quot;1&quot;) || requestType.equals(&quot;3&quot;)) &amp;&amp; (!chatIdToNotificationMap.containsKey(chatId) || chatIdToNotificationMap.get(chatId).IsInviteReceived() == false))
						{														
							String liveWorkItemId = content.get(&quot;liveWorkItemId&quot;).toString();						
							String transactionId = content.get(&quot;transactionId&quot;).toString();							
							String organizationId = content.get(&quot;organizationId&quot;).toString();

							String channelId = content.get(&quot;channelId&quot;).toString();
							String conversationThreadId = content.get(&quot;conversationThreadId&quot;).toString();
							
							log.info(&quot;sessionId: &quot; +  sessionId);
							log.info(&quot;organizationId: &quot; +  organizationId);
							log.info(&quot;liveWorkItemId: &quot; +  liveWorkItemId);
							log.info(&quot;requestType: &quot; +  requestType);
							log.info(&quot;chatId: &quot; +  chatId);
							log.info(&quot;transactionId: &quot; +  transactionId);
							log.info(&quot;channelId: &quot; + channelId);
							log.info(&quot;conversationThreadId: &quot; + conversationThreadId);

							if(chatIdToNotificationMap.containsKey(chatId))
							{
								Notification oldNotification = chatIdToNotificationMap.get(chatId);
								oldNotification.SetContext(sessionId, liveWorkItemId, requestType, transactionId, organizationId, channelId, conversationThreadId);
								notificationList.add(oldNotification);
							}
							else
							{
								Notification newNotification = new Notification(chatId);
								newNotification.SetContext(sessionId, liveWorkItemId, requestType, transactionId, organizationId, channelId, conversationThreadId);
								notificationList.add(newNotification);
								chatIdToNotificationMap.put(chatId, newNotification);
							}
							sessionIds = sessionIds + &quot;|&quot; + sessionId;		
						}
						else
						{
							dupSessionIds = dupSessionIds + &quot;|&quot; + sessionId;
						}				
	 				}         						
	 			}
	  		}
		  }
		}
	}
}


notificationsQueue.AddReceivedNotifications(notificationList);
vars.put(&quot;sessionIdCsv&quot;, sessionIds);
vars.put(&quot;dupSessionIdCsv&quot;, dupSessionIds);
vars.put(&quot;receivedMsgCsv&quot;, receivedMsgCsv);
vars.put(&quot;receivedTimeCsv&quot;, receivedTimeCsv);
vars.put(&quot;receivedFromCsv&quot;, receivedFromCsv);
vars.put(&quot;receivedChatIdCsv&quot;, receivedChatIdCsv);
if(notificationList.size() &gt; 0)
{
	vars.put(&quot;firePreAcceptEvent&quot;, &quot;1&quot;);
}

if(vars.get(&quot;MockIC3&quot;) == &quot;false&quot;){
	//vars.put(&quot;entirePollResponse&quot;, URLEncoder.encode(&quot;URL: &quot;+vars.get(&quot;PRODUrl&quot;)+vars.get(&quot;PollPath&quot;) + &quot;\n registration token: &quot;+vars.get(&quot;RegistrationToken&quot;) + &quot;\n Response headers: &quot;+ ResponseHeaders+ &quot;\n Response Data: &quot;+ prev.getResponseDataAsString(), &quot;UTF-8&quot;));
	vars.put(&quot;entirePollResponse&quot;, URLEncoder.encode(&quot;Check other fields&quot;, &quot;UTF-8&quot;));
	vars.put(&quot;longpollURL&quot;, URLEncoder.encode(prev.getUrlAsString(), &quot;UTF-8&quot;));
	vars.put(&quot;longpollRegistrationToken&quot;, URLEncoder.encode(vars.get(&quot;RegistrationToken&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;longpollRequestHeader&quot;, URLEncoder.encode(prev.getRequestHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;longpollResponseHeader&quot;, URLEncoder.encode(prev.getResponseHeaders() , &quot;UTF-8&quot;));
//	vars.put(&quot;longpollResponseBody&quot;, URLEncoder.encode(prev.getResponseDataAsString() , &quot;UTF-8&quot;));
}</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Refresh token if long poll fails" enabled="true">
                      <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;PollSuccess&quot;) != &quot;200&quot; &amp;&amp; vars.get(&quot;MockIC3&quot;) == &quot;false&quot;)}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                      <boolProp name="IfController.useExpression">true</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAADToken Retry" enabled="false">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">resource=https%3A%2F%2Fapi.spaces.skype.com&amp;client_id=${skypeclientid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${TenantId}/oauth2/token</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract aad token" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                          <stringProp name="RegexExtractor.refname">aadToken</stringProp>
                          <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAADToken Retry" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">resource=https%3A%2F%2Fapi.spaces.skype.com&amp;client_id=${skypeclientid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${TenantId}/oauth2/token</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract AAD Token" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                          <stringProp name="RegexExtractor.refname">aadToken</stringProp>
                          <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="AAD Token Call Status Code Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">AADTokenStatus</stringProp>
                          <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkypeTokenFromCBB Retry" enabled="false">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&quot;TenantId&quot; : &quot;${TenantId}&quot;}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/cbb/getauthtoken</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">OrganizationId</stringProp>
                              <stringProp name="Header.value">${OrgId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">TenantId</stringProp>
                              <stringProp name="Header.value">${TenantId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">AgentAdId</stringProp>
                              <stringProp name="Header.value">${AgentAdId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Ocp-Apim-Trace</stringProp>
                              <stringProp name="Header.value">true</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Ocp-Apim-Subscription-Key</stringProp>
                              <stringProp name="Header.value">${Ocp-Apim-Subscription-Key}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-AadToken</stringProp>
                              <stringProp name="Header.value">${aadToken}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SkypeToken  Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                          <stringProp name="RegexExtractor.refname">skypeToken</stringProp>
                          <stringProp name="RegexExtractor.regex">skypeToken&quot;:&quot;(.+?)&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SkypeTokenAuthUrl Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">SkypeTokenAuthUrlRetry</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;ams&quot;:&quot;https://(.+?)&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ProdURL Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">PRODUrlRetry</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;chatService&quot;:&quot;https://(.+?)&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Skype Token Status Code Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">SkypeTokenStatusRetry</stringProp>
                          <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">TransactionIdCBBAuth</stringProp>
                          <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                          <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkypeTokenFromCBB Retry" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&quot;TenantId&quot; : &quot;${TenantId}&quot;}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/cbb/getauthtoken</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">OrganizationId</stringProp>
                              <stringProp name="Header.value">${OrgId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">TenantId</stringProp>
                              <stringProp name="Header.value">${TenantId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">AgentAdId</stringProp>
                              <stringProp name="Header.value">${AgentAdId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Ocp-Apim-Trace</stringProp>
                              <stringProp name="Header.value">true</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Ocp-Apim-Subscription-Key</stringProp>
                              <stringProp name="Header.value">${Ocp-Apim-Subscription-Key}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">X-AadToken</stringProp>
                              <stringProp name="Header.value">${aadToken}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SkypeToken  Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                          <stringProp name="RegexExtractor.refname">skypeToken</stringProp>
                          <stringProp name="RegexExtractor.regex">skypeToken&quot;:&quot;(.+?)&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SkypeTokenAuthUrl Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">SkypeTokenAuthUrl</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;ams&quot;:&quot;https://(.+?)&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ProdURL Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">PRODUrl</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;chatService&quot;:&quot;https://(.+?)&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Skype Token Status Code Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">SkypeTokenStatus</stringProp>
                          <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">TransactionIdCBBAuth</stringProp>
                          <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                          <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Skype token retry telemetry call" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;get_skype_token_cbb_retry&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${TransactionIdCBBAuth}&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${SkypeTokenStatus}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check if CBB is responding" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;SkypeTokenStatus&quot;) != &quot;200&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken Retry" enabled="false">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid&amp;client_secret=${clientsecret}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="OC Token HTTP Cookie" enabled="true">
                            <collectionProp name="CookieManager.cookies"/>
                            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                          </CookieManager>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="OC Token HTTP Header" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">client-request-id</stringProp>
                                <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract OC Token" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">ocToken</stringProp>
                            <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken Retry" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid&amp;client_secret=${clientsecret}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                            <collectionProp name="CookieManager.cookies"/>
                            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                          </CookieManager>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">client-request-id</stringProp>
                                <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract access token" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">ocToken</stringProp>
                            <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Update OC Token variable" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">if(vars.get(&quot;ocToken&quot;) != null )
{
	vars.put(&quot;ocTokenCheck&quot;, &quot;1&quot;);
}
else
{
	log.info(&quot;Get Oc Token Failed&quot;);
}
</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OC Token Call Status" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">GetOcTokenResponse</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkypeTokenFromCBB Retry" enabled="false">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&quot;TenantId&quot; : &quot;${TenantId}&quot;}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">/cbb/getauthtoken</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">OrganizationId</stringProp>
                                <stringProp name="Header.value">${OrgId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">TenantId</stringProp>
                                <stringProp name="Header.value">${TenantId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">AgentAdId</stringProp>
                                <stringProp name="Header.value">${AgentAdId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Ocp-Apim-Trace</stringProp>
                                <stringProp name="Header.value">true</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">X-AadToken</stringProp>
                                <stringProp name="Header.value">${aadTokenRetry}</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SkypeToken  Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                            <stringProp name="RegexExtractor.refname">skypeTokenRetry</stringProp>
                            <stringProp name="RegexExtractor.regex">skypeToken&quot;:&quot;(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SkypeTokenAuthUrl Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">SkypeTokenAuthUrlRetry</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;ams&quot;:&quot;https://(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ProdURL Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">PRODUrl</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;chatService&quot;:&quot;https://(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Skype Token Status Code Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">SkypeTokenStatusRetry</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">TransactionIdCBBAuth</stringProp>
                            <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkypeTokenFromCBB Retry" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&quot;TenantId&quot; : &quot;${TenantId}&quot;}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">/cbb/getauthtoken</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">OrganizationId</stringProp>
                                <stringProp name="Header.value">${OrgId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">TenantId</stringProp>
                                <stringProp name="Header.value">${TenantId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">AgentAdId</stringProp>
                                <stringProp name="Header.value">${AgentAdId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Ocp-Apim-Trace</stringProp>
                                <stringProp name="Header.value">true</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Ocp-Apim-Subscription-Key</stringProp>
                                <stringProp name="Header.value">${Ocp-Apim-Subscription-Key}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">X-AadToken</stringProp>
                                <stringProp name="Header.value">${aadToken}</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SkypeToken  Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                            <stringProp name="RegexExtractor.refname">skypeToken</stringProp>
                            <stringProp name="RegexExtractor.regex">skypeToken&quot;:&quot;(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SkypeTokenAuthUrl Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">SkypeTokenAuthUrl</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;ams&quot;:&quot;https://(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ProdURL Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">PRODUrl</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;chatService&quot;:&quot;https://(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Skype Token Status Code Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">SkypeTokenStatus</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">TransactionIdCBBAuth</stringProp>
                            <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Skype token retry telemetry call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;get_skype_token_cbb_retry&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${TransactionIdCBBAuth}&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${SkypeTokenStatus}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SkypeTokenAuth Retry" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">skypetoken=${skypeToken}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SkypeTokenAuthUrl}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">v1/skypetokenauth</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">skype_token  ${skypeToken}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Retry for endpoint creation " enabled="true">
                        <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;counterRetry&quot;) &lt; 5 &amp;&amp; vars.get(&quot;CreateRetry&quot;) != &quot;201&quot;)}</stringProp>
                      </WhileController>
                      <hashTree>
                        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                          <stringProp name="CounterConfig.start">1</stringProp>
                          <stringProp name="CounterConfig.end">5</stringProp>
                          <stringProp name="CounterConfig.incr">1</stringProp>
                          <stringProp name="CounterConfig.name">counterRetry</stringProp>
                          <stringProp name="CounterConfig.format"></stringProp>
                          <boolProp name="CounterConfig.per_user">true</boolProp>
                          <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                        </CounterConfig>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateEndpointAndGetRegistrationToken Retry ${counterRetry}" enabled="false">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;endpointFeatures&quot;:&quot;Agent,InviteFree,MessageProperties&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${PRODUrl}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">v1/users/ME/endpoints</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authentication</stringProp>
                                <stringProp name="Header.value">skypetoken=${skypeTokenRetry}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ExtractRegistrationToken" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">RegistrationTokenRetry</stringProp>
                            <stringProp name="RegexExtractor.regex">Set-RegistrationToken:(.+?)\n</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update skype token refresh timestamp" enabled="true">
                            <stringProp name="scriptLanguage">groovy</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="cacheKey">false</stringProp>
                            <stringProp name="script">vars.put(&quot;LastSkypeTokenRefresh&quot;, &quot;${__time(,)}&quot;);

vars.put(&quot;RegistrationToken&quot;, vars.get(&quot;RegistrationTokenRetry&quot;));
vars.put(&quot;PRODUrl&quot;, vars.get(&quot;PRODUrlRetry&quot;));
vars.put(&quot;TokenExpired&quot;, &quot;false&quot;)

</stringProp>
                          </JSR223PostProcessor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Redirect Location" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">RedirectLocation</stringProp>
                            <stringProp name="RegexExtractor.regex">Location:(.+?)\n</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                            <stringProp name="scriptLanguage">groovy</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="cacheKey">true</stringProp>
                            <stringProp name="script">if (prev.getResponseCode().equals(&quot;404&quot;)) {

	def url = new URL(vars.get(&quot;RedirectLocation&quot;));
	
	def host = url.getHost()
	
	log.info(&apos;Full URL: &apos; + url.toString())
	vars.put(&quot;PRODUrl&quot;, host.toString());
	log.info(&quot;RedirectURL&quot; + vars.get(&quot;RedirectLocation&quot;));
} else {
	vars.put(&quot;CreateRetry&quot;,prev.getResponseCode());	
}

vars.put(&quot;createEndpointURLR&quot;, URLEncoder.encode(prev.getUrlAsString(), &quot;UTF-8&quot;));
	vars.put(&quot;createEndpointRequestHeaderR&quot;, URLEncoder.encode(prev.getRequestHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;createEndpointResponseHeaderR&quot;, URLEncoder.encode(prev.getResponseHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;createEndpointResponseBodyR&quot;, URLEncoder.encode(prev.getResponseDataAsString() , &quot;UTF-8&quot;));</stringProp>
                          </JSR223PostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateEndpointAndGetRegistrationToken Retry ${counterRetry}" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;endpointFeatures&quot;:&quot;Agent,InviteFree,MessageProperties&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${PRODUrl}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">v1/users/ME/endpoints</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout">120000</stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authentication</stringProp>
                                <stringProp name="Header.value">skypetoken=${skypeToken}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">BehaviorOverride</stringProp>
                                <stringProp name="Header.value">redirectAs404</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ExtractRegistrationToken" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">RegistrationToken</stringProp>
                            <stringProp name="RegexExtractor.regex">Set-RegistrationToken:(.+?)\n</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Registration Token Status Code Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">RegistrationTokenStatus</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update skype token refresh timestamp" enabled="true">
                            <stringProp name="scriptLanguage">groovy</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="cacheKey">false</stringProp>
                            <stringProp name="script">vars.put(&quot;LastSkypeTokenRefresh&quot;, &quot;${__time(,)}&quot;);

log.info(&quot;LastSkypeTokenRefreshTimestamp: &quot; + vars.get(&quot;LastSkypeTokenRefresh&quot;))
vars.put(&quot;TokenExpired&quot;, &quot;false&quot;)</stringProp>
                          </JSR223PostProcessor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Redirect Location" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">RedirectLocation</stringProp>
                            <stringProp name="RegexExtractor.regex">Location:(.+?)\n</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                            <stringProp name="scriptLanguage">groovy</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="cacheKey">true</stringProp>
                            <stringProp name="script">/*if (vars.get(&quot;RegistrationTokenStatus&quot;) != &quot;201&quot;) {

	def url = new URL(vars.get(&quot;RedirectLocation&quot;));
	
	def host = url.getHost()
	
	log.info(&apos;Full URL: &apos; + url.toString())
	vars.put(&quot;PRODUrl&quot;, host.toString());
	log.info(&quot;RedirectURL&quot; + vars.get(&quot;RedirectLocation&quot;));
}*/

if(vars.get(&quot;RedirectLocation&quot;) != &quot;&quot;){
	def url = new URL(vars.get(&quot;RedirectLocation&quot;));
	
	def host = url.getHost()
	
	log.info(&apos;Redirect Full URL: &apos; + url.toString())
	vars.put(&quot;PRODUrl&quot;, host.toString());
	log.info(&quot;RedirectURL host&quot; + vars.get(&quot;RedirectLocation&quot;));
}

vars.put(&quot;CreateRetry&quot;,prev.getResponseCode());	

	vars.put(&quot;createEndpointURLR&quot;, URLEncoder.encode(prev.getUrlAsString(), &quot;UTF-8&quot;));
	vars.put(&quot;createEndpointRequestHeaderR&quot;, URLEncoder.encode(prev.getRequestHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;createEndpointResponseHeaderR&quot;, URLEncoder.encode(prev.getResponseHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;createEndpointResponseBodyR&quot;, URLEncoder.encode(prev.getResponseDataAsString() , &quot;UTF-8&quot;));</stringProp>
                          </JSR223PostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create endpoint and get reg token retry  telemetry call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;create_endpoint_get_reg_token_retry&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${RegistrationTokenStatus}&quot;,&#xd;
	&quot;attemptsMade&quot;:&quot;${counterRetry}&quot;,&#xd;
	&quot;url&quot;:&quot;${createEndpointURLR}&quot;,&#xd;
	&quot;requestHeader&quot;:&quot;${createEndpointRequestHeaderR}&quot;,&#xd;
	&quot;responseHeader&quot;:&quot;${createEndpointResponseHeaderR}&quot;,&#xd;
	&quot;responseBody&quot;:&quot;${createEndpointResponseBodyR}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Subscribe if endpoint creation retry succeeded" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;CreateRetry&quot;) == &quot;201&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubscribeToAll Retry" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;channeltype&quot;:&quot;httpLongPoll&quot;,&#xd;
	&quot;interestedResources&quot;:[&#xd;
		&quot;/v1/users/ME/conversations/ALL/properties&quot;,&#xd;
		&quot;/v1/users/ME/conversations/ALL/messages&quot;,&#xd;
		&quot;/v1/threads/ALL&quot;,&quot;/v1/users/ME/contacts/ALL&quot;&#xd;
	]&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${PRODUrl}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">v1/users/ME/endpoints/SELF/subscriptions</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">RegistrationToken</stringProp>
                                <stringProp name="Header.value">${RegistrationToken}</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                            <stringProp name="scriptLanguage">groovy</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="cacheKey">true</stringProp>
                            <stringProp name="script">if (prev.getResponseCode().equals(&quot;201&quot;)) {
	vars.put(&quot;SubRetry&quot;, &quot;terminate&quot;);
}

	vars.put(&quot;subscribeCallURLR&quot;, URLEncoder.encode(prev.getUrlAsString(), &quot;UTF-8&quot;));
	vars.put(&quot;subscribeCallRequestHeaderR&quot;, URLEncoder.encode(prev.getRequestHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;subscribeCallResponseHeaderR&quot;, URLEncoder.encode(prev.getResponseHeaders() , &quot;UTF-8&quot;));
	vars.put(&quot;subscribeCallResponseBodyR&quot;, URLEncoder.encode(prev.getResponseDataAsString() , &quot;UTF-8&quot;));</stringProp>
                          </JSR223PostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="subscribe to all  telemetry call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;subscribe_to_all_retry&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${RegistrationTokenStatus}&quot;,&#xd;
	&quot;url&quot;:&quot;${subscribeCallURLR}&quot;,&#xd;
	&quot;requestHeader&quot;:&quot;${subscribeCallRequestHeaderR}&quot;,&#xd;
	&quot;responseHeader&quot;:&quot;${subscribeCallResponseHeaderR}&quot;,&#xd;
	&quot;responseBody&quot;:&quot;${subscribeCallResponseBodyR}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAllT3Messages" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="pageSize" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">20</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">pageSize</stringProp>
                            </elementProp>
                            <elementProp name="view" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">msnp24Equivalent%7CsupportsMessageProperties</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">view</stringProp>
                            </elementProp>
                            <elementProp name="startTime" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">startTime</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${PRODUrl}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">v1/users/ME/conversations/${T3Id}@unq.gbl.spaces/messages</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">RegistrationToken</stringProp>
                              <stringProp name="Header.value">${RegistrationToken}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="GetAllSessionsFromGetMessagesResponse" enabled="true">
                          <stringProp name="scriptLanguage">groovy</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey">false</stringProp>
                          <stringProp name="script">import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.util.ArrayList;
import java.net.URLEncoder;
import NotificationsQueue;
import Notification;

NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);
HashMap chatIdToNotificationMap = vars.getObject(&quot;chatIdToNotificationMap&quot;);

ArrayList notificationList = new ArrayList();
String encodedresponse = &quot;&quot;;
String sessionIds = &quot;&quot;;
String dupSessionIds = &quot;&quot;;
String containsMsg = &quot;0&quot;;
String receivedMsgCsv = &quot;&quot;;
String receivedTimeCsv = &quot;&quot;;
String receivedFromCsv = &quot;&quot;;
String receivedChatIdCsv = &quot;&quot;;
if(vars.get(&quot;MockIC3&quot;) == &quot;false&quot;)
{
	String responseStr = prev.getResponseDataAsString();
	if(responseStr != &quot;&quot;)
	{
		JSONParser parser = new JSONParser();
		log.info(&quot;pass1&quot;);
		log.info(&quot;responseStr is: &quot; + responseStr);
		log.info(&quot;pass2&quot;);
		JSONObject response = (JSONObject)parser.parse(responseStr);
		log.info(&quot;pass3&quot;);
		encodedresponse = URLEncoder.encode(responseStr, &quot;UTF-8&quot;);
		respLength = responseStr.length();
		
		if(response.containsKey(&quot;eventMessages&quot;))
		{	           
		  JSONArray eventMessages = (JSONArray)response.get(&quot;eventMessages&quot;);
		  for(int i=0; i&lt;eventMessages.size(); i++)
		  {       	      	
			JSONObject eventMessage = (JSONObject)eventMessages.get(i);
			if(eventMessage.containsKey(&quot;resource&quot;))
			{
				JSONObject resource = (JSONObject)eventMessage.get(&quot;resource&quot;);
				
				if(resource.containsKey(&quot;threadtype&quot;))
				{
					String threadtype = resource.get(&quot;threadtype&quot;).toString();
					if(threadtype.contentEquals(&quot;chat&quot;) &amp;&amp; resource.containsKey(&quot;content&quot;))
					{
						String contentStr = resource.get(&quot;content&quot;).toString();
						if(contentStr.startsWith(&quot;&lt;&quot;) == false)           		    
						{
							contentStr = contentStr.replace(&quot;&amp;quot;&quot;, &quot;\&quot;&quot;);
							JSONObject content = (JSONObject)parser.parse(contentStr);
							if(content.containsKey(&quot;conversationId&quot;) &amp;&amp; content.containsKey(&quot;sessionId&quot;))
							{
								String sessionId = content.get(&quot;sessionId&quot;).toString();
								String chatId = content.get(&quot;conversationId&quot;).toString();	
								if(!chatIdToNotificationMap.containsKey(chatId) || chatIdToNotificationMap.get(chatId).IsInviteReceived() == false)
								{															
									String liveWorkItemId = content.get(&quot;liveWorkItemId&quot;).toString();
									String requestType = content.get(&quot;requestType&quot;).toString();
									String transactionId = content.get(&quot;transactionId&quot;).toString();							
									String organizationId = content.get(&quot;organizationId&quot;).toString();
		
									log.info(&quot;sessionId: &quot; +  sessionId);
									log.info(&quot;organizationId: &quot; +  organizationId);
									log.info(&quot;liveWorkItemId: &quot; +  liveWorkItemId);
									log.info(&quot;requestType: &quot; +  requestType);
									log.info(&quot;chatId: &quot; +  chatId);
									log.info(&quot;transactionId: &quot; +  transactionId);
	
									if(chatIdToNotificationMap.containsKey(chatId))
									{
										Notification oldNotification = chatIdToNotificationMap.get(chatId);
										oldNotification.SetContext(sessionId, liveWorkItemId, requestType, transactionId, organizationId);
										notificationList.add(oldNotification);
									}
									else
									{
										Notification newNotification = new Notification(chatId);
										newNotification.SetContext(sessionId, liveWorkItemId, requestType, transactionId, organizationId);
										notificationList.add(newNotification);
										chatIdToNotificationMap.put(chatId, newNotification);
									}
									sessionIds = sessionIds + &quot;|&quot; + sessionId;		
								}
								else
								{
									dupSessionIds = dupSessionIds + &quot;|&quot; + sessionId;
								}
							}        						
						}
					}
					else if(threadtype.contentEquals(&quot;meeting&quot;) &amp;&amp; resource.containsKey(&quot;content&quot;))
					{
						if(resource.containsKey(&quot;imdisplayname&quot;))
						{
							String imdisplayname = resource.get(&quot;imdisplayname&quot;).toString();
							if(imdisplayname.contentEquals(&quot;Customer&quot;))
							{
								String conversationLink = resource.get(&quot;conversationLink&quot;).toString();
								String chatId = conversationLink.substring(conversationLink.lastIndexOf(&apos;/&apos;) + 1);
								String content = resource.get(&quot;content&quot;).toString();
								String time = resource.get(&quot;composetime&quot;).toString();

								if(chatIdToNotificationMap.containsKey(chatId))
								{
									Notification oldNotification = chatIdToNotificationMap.get(chatId);
									oldNotification.AddReceivedMessage(content);
								}
								else
								{
									Notification newNotification = new Notification(chatId);
									newNotification.AddReceivedMessage(content);
									chatIdToNotificationMap.put(chatId, newNotification);
								}
								
								log.info(&quot;Added Message: &quot; + content + &quot; to received message list for chatid: &quot; + chatId);
		
								receivedMsgCsv = receivedMsgCsv + &quot;|&quot; + content;
								receivedTimeCsv = receivedTimeCsv + &quot;|&quot; + time;
								receivedFromCsv = receivedFromCsv + &quot;|&quot; + imdisplayname;
								receivedChatIdCsv = receivedChatIdCsv + &quot;|&quot; + chatId;
							}
						}
					}
				}
			}
		  }
		}
	}
}
else
{
	String responseStr = prev.getResponseDataAsString();
	if(responseStr != null &amp;&amp; !responseStr.isEmpty())
	{
		JSONParser parser = new JSONParser();
		String responseStr2 = (String)parser.parse(responseStr);
		
		JSONObject response = (JSONObject)parser.parse(responseStr2);
	
		
		encodedresponse = URLEncoder.encode(responseStr2, &quot;UTF-8&quot;);
		respLength = responseStr.length();
		if(response.containsKey(&quot;eventMessages&quot;))
		{	           
		  JSONArray eventMessages = (JSONArray)response.get(&quot;eventMessages&quot;);
		  for(int i=0; i&lt;eventMessages.size(); i++)
		  {       	      	
		  	JSONObject eventMessage = (JSONObject)eventMessages.get(i);
		  	if(eventMessage.containsKey(&quot;content&quot;))
	  		{
				String contentStr = eventMessage.get(&quot;content&quot;).toString();
	 			if(contentStr.startsWith(&quot;&lt;&quot;) == false)           		    
	 			{
	 				contentStr = contentStr.replace(&quot;&amp;quot;&quot;, &quot;\&quot;&quot;);
	 				JSONObject content = (JSONObject)parser.parse(contentStr);
	 				if(content.containsKey(&quot;conversationId&quot;) &amp;&amp; content.containsKey(&quot;sessionId&quot;))
	 				{
	 					String sessionId = content.get(&quot;sessionId&quot;).toString();
	 					String chatId = content.get(&quot;conversationId&quot;).toString();
						if(!chatIdToNotificationMap.containsKey(chatId) || chatIdToNotificationMap.get(chatId).IsInviteReceived() == false)
						{														
							String liveWorkItemId = content.get(&quot;liveWorkItemId&quot;).toString();
							String requestType = content.get(&quot;requestType&quot;).toString();
							String transactionId = content.get(&quot;transactionId&quot;).toString();							
							String organizationId = content.get(&quot;organizationId&quot;).toString();

							log.info(&quot;sessionId: &quot; +  sessionId);
							log.info(&quot;organizationId: &quot; +  organizationId);
							log.info(&quot;liveWorkItemId: &quot; +  liveWorkItemId);
							log.info(&quot;requestType: &quot; +  requestType);
							log.info(&quot;chatId: &quot; +  chatId);
							log.info(&quot;transactionId: &quot; +  transactionId);

							if(chatIdToNotificationMap.containsKey(chatId))
							{
								Notification oldNotification = chatIdToNotificationMap.get(chatId);
								oldNotification.SetContext(sessionId, liveWorkItemId, requestType, transactionId, organizationId);
								notificationList.add(oldNotification);
							}
							else
							{
								Notification newNotification = new Notification(chatId);
								newNotification.SetContext(sessionId, liveWorkItemId, requestType, transactionId, organizationId);
								notificationList.add(newNotification);
								chatIdToNotificationMap.put(chatId, newNotification);
							}
							sessionIds = sessionIds + &quot;|&quot; + sessionId;		
						}
						else
						{
							dupSessionIds = dupSessionIds + &quot;|&quot; + sessionId;
						}				
	 				}         						
	 			}
	  		}
		  }
		}
	}
}


notificationsQueue.AddReceivedNotifications(notificationList);
vars.put(&quot;sessionIdCsv&quot;, sessionIds);
vars.put(&quot;dupSessionIdCsv&quot;, dupSessionIds);
vars.put(&quot;receivedMsgCsv&quot;, receivedMsgCsv);
vars.put(&quot;receivedTimeCsv&quot;, receivedTimeCsv);
vars.put(&quot;receivedFromCsv&quot;, receivedFromCsv);
vars.put(&quot;receivedChatIdCsv&quot;, receivedChatIdCsv);
if(notificationList.size() &gt; 0)
{
	vars.put(&quot;fireAcceptEvent&quot;, &quot;1&quot;);
}
//vars.put(&quot;entirePollResponse&quot;, URLEncoder.encode(&quot;URL: &quot;+vars.get(&quot;PRODUrl&quot;) + &quot;\n registration token: &quot;+vars.get(&quot;RegistrationToken&quot;) + &quot;\n Response headers: &quot;+ ResponseHeaders, &quot;UTF-8&quot;));
</stringProp>
                        </JSR223PostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send entire poll response to telemetry" enabled="false">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;entire_poll_response&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;sessionIdCsv&quot;:&quot;${sessionIdCsv}&quot;,&#xd;
	&quot;dupSessionIdCsv&quot;:&quot;${dupSessionIdCsv}&quot;,&#xd;
	&quot;receivedMsgCsv&quot;:&quot;${receivedMsgCsv}&quot;,&#xd;
	&quot;receivedFromCsv&quot;:&quot;${receivedFromCsv}&quot;,&#xd;
	&quot;receivedTimeCsv&quot;:&quot;${receivedTimeCsv}&quot;,&#xd;
	&quot;receivedChatIdCsv&quot;:&quot;${receivedChatIdCsv}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;entireResponse&quot;:&quot;${entirePollResponse}&quot;,&#xd;
	&quot;longpollURL&quot;:&quot;${longpollURL}&quot;,&#xd;
	&quot;longpollRegistrationToken&quot;:&quot;${longpollRegistrationToken}&quot;,&#xd;
	&quot;longpollRequestHeader&quot;:&quot;${longpollRequestHeader}&quot;,&#xd;
	&quot;longpollResponseHeader&quot;:&quot;${longpollResponseHeader}&quot;,&#xd;
	&quot;rstatus&quot;:&quot;${PollSuccess}&quot;&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">localhost</stringProp>
                      <stringProp name="HTTPSampler.port">3000</stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">telemetry</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WebSocket flow to receive messages if UseSignalR true" enabled="true">
                    <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;UseSignalR&quot;) == &quot;true&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
                    <hashTree>
                      <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Agent Connect with SignalR - ABS" enabled="true"/>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Negotiate" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">agentbackbone/negotiate?OrganizationId=${OrgId}&amp;ClientSessionId=${ClientSessionId}&amp;negotiateVersion=1</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Origin </stringProp>
                                <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Client Session Id" enabled="true">
                            <stringProp name="scriptLanguage">javascript</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="cacheKey">true</stringProp>
                            <stringProp name="script">var guidPattern = &quot;xx-x-4m-ym-xxx&quot;;
var newGuid = &quot;&quot;;

for (var i = 0; i &lt; guidPattern.length; i++) {
	var randomString = Math.floor(Math.random() * Date.now());
	switch (guidPattern[i]) {
		case &quot;x&quot;:
			newGuid += randomString.toString(16).substring(0, 4);
			break; //get 4 digit
		case &quot;m&quot;:
			newGuid += randomString.toString(16).substring(0, 3);
			break; //Get 3 digit
		case &quot;y&quot;:
			newGuid += (randomString &amp; 0x3 | 0x8).toString(16);
			break; // To get only one of 8, 9, A, or B
		default:
			newGuid += guidPattern[i]; //Default &quot;-&quot; and &quot;4&quot;
	}
}

vars.put(&quot;ClientSessionId&quot;, newGuid);
log.info(&quot;ClientSessionId: &quot; + vars.get(&quot;ClientSessionId&quot;));
</stringProp>
                          </JSR223PreProcessor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Agent Negotiate Call Status" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">AgentNegotiateStatus</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">TransactionIdNegotiate</stringProp>
                            <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="AccessToken Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                            <stringProp name="RegexExtractor.refname">accessToken</stringProp>
                            <stringProp name="RegexExtractor.regex">accessToken&quot;:&quot;(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="signalrURL Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">signalrURL</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;https://(.+?(?=\/))</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract Agent Negotiate Response" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">String responseStr = prev.getResponseDataAsString();

vars.put(&quot;AgentNegotiateResponse&quot;, responseStr);</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - log signalrURL value" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">try {	
	log.info(&quot;${signalrURL}&quot;);
}
catch (Exception ex) {
    	log.error(&quot;Error in Beanshell&quot;, ex);
    	throw ex;
}</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Negotiate Telemetry Call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;agent_negotiate&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${AgentNegotiateStatus}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Connection" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${signalrURL}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">client/negotiate?hub=controlmessagehub&amp;asrs.op=%2FcontrolMessageHub&amp;OrganizationId=${OrgId}&amp;ClientSessionId=${ClientSessionId}&amp;negotiateVersion=1&amp;ADUserId=${AgentAdId}&amp;TenantId=${TenantId}b&amp;asrs_request_id=zyZTqRIyAAA%3D</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Origin </stringProp>
                                <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Agent Connection Call Status" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">AgentConnectionStatus</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">TransactionIdConnect</stringProp>
                            <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ConnectionId Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                            <stringProp name="RegexExtractor.refname">connectionId</stringProp>
                            <stringProp name="RegexExtractor.regex">connectionId&quot;:&quot;(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract Agent Connection Response" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">String responseStr = prev.getResponseDataAsString();

vars.put(&quot;AgentConnectionResponse&quot;, responseStr);</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Connection Telemetry Call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;agent_connection&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${AgentConnectionStatus}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="Establish WebSocket Connection" enabled="true">
                          <boolProp name="TLS">true</boolProp>
                          <stringProp name="server">${signalrURL}</stringProp>
                          <stringProp name="port">443</stringProp>
                          <stringProp name="path">client/?hub=controlmessagehub&amp;asrs.op=%2FcontrolMessageHub&amp;OrganizationId=${OrgId}&amp;ClientSessionId=${ClientSessionId}&amp;negotiateVersion=1&amp;ADUserId=${AgentAdId}&amp;TenantId=${TenantId}&amp;asrs_request_id=zyZTqRIyAAA%3D&amp;id=${connectionId}&amp;access_token=${accessToken}</stringProp>
                          <stringProp name="connectTimeout">20000</stringProp>
                          <boolProp name="binaryPayload">false</boolProp>
                          <stringProp name="requestData">{&quot;protocol&quot;:&quot;json&quot;,&quot;version&quot;:1}&#x1e;</stringProp>
                          <boolProp name="createNewConnection">true</boolProp>
                          <boolProp name="loadDataFromFile">false</boolProp>
                          <stringProp name="dataFile"></stringProp>
                          <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
                        </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Sec-WebSocket-Extensions</stringProp>
                                <stringProp name="Header.value">permessage-deflate; client_max_window_bits</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Connection</stringProp>
                                <stringProp name="Header.value">Upgrade</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Origin</stringProp>
                                <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Sec-WebSocket-Key</stringProp>
                                <stringProp name="Header.value">jcsZWIfA2tEKP/d8wuCdjA==</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Establish WebSocket Status" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">vars.put(&quot;EstablishWebSocketStatus&quot;, prev.getResponseCode());

log.info(&quot;Establish websocket status: &quot; + vars.get(&quot;EstablishWebSocketStatus&quot;));</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Establish Websocket Telemetry Call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;establish_websocket&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${EstablishWebSocketStatus}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Empty Response Read Sampler" enabled="true">
                          <boolProp name="TLS">false</boolProp>
                          <stringProp name="server"></stringProp>
                          <stringProp name="port">80</stringProp>
                          <stringProp name="path"></stringProp>
                          <stringProp name="connectTimeout">20000</stringProp>
                          <stringProp name="dataType">Text</stringProp>
                          <boolProp name="createNewConnection">false</boolProp>
                          <stringProp name="readTimeout">6000</stringProp>
                          <boolProp name="optional">true</boolProp>
                        </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
                        <hashTree>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Empty Response Read Status" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">vars.put(&quot;EmptyResponseReadStatus&quot;, prev.getResponseCode());

log.info(&quot;Empty response read status: &quot; + vars.get(&quot;EmptyResponseReadStatus&quot;));</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract Empty Response" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">String responseStr = prev.getResponseDataAsString();
responseStr = responseStr.substring(0, responseStr.length()-1);

vars.put(&quot;EmptyResponse&quot;, responseStr);</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Empty Response Telemetry Call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;read_empty_response&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${EmptyResponse}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="AddToGroup Response Read Sampler" enabled="true">
                          <boolProp name="TLS">false</boolProp>
                          <stringProp name="server"></stringProp>
                          <stringProp name="port">80</stringProp>
                          <stringProp name="path"></stringProp>
                          <stringProp name="connectTimeout">20000</stringProp>
                          <stringProp name="dataType">Text</stringProp>
                          <boolProp name="createNewConnection">false</boolProp>
                          <stringProp name="readTimeout">6000</stringProp>
                          <boolProp name="optional">true</boolProp>
                        </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
                        <hashTree>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="AddToGroup Response Read Status" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">vars.put(&quot;AddToGroupResponseReadStatus&quot;, prev.getResponseCode());

log.info(&quot;AddToGroup response read status: &quot; + vars.get(&quot;AddToGroupResponseReadStatus&quot;));</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract AddToGroup Response" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">String responseStr = prev.getResponseDataAsString();
responseStr = responseStr.substring(0, responseStr.length()-1);

vars.put(&quot;AddToGroupResponse&quot;, responseStr);</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddToGroup Response Telemetry Call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;read_addtogroup_response&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${AddToGroupResponseReadStatus}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="Heartbeat Write Sampler" enabled="false">
                          <boolProp name="TLS">false</boolProp>
                          <stringProp name="server"></stringProp>
                          <stringProp name="port">80</stringProp>
                          <stringProp name="path"></stringProp>
                          <stringProp name="connectTimeout">20000</stringProp>
                          <boolProp name="binaryPayload">false</boolProp>
                          <stringProp name="requestData">{&quot;type&quot;:6}&#x1e;</stringProp>
                          <boolProp name="createNewConnection">false</boolProp>
                          <boolProp name="loadDataFromFile">false</boolProp>
                          <stringProp name="dataFile"></stringProp>
                        </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
                        <hashTree>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Heartbeat Write Status" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">vars.put(&quot;HeartbeatWriteStatus&quot;, prev.getResponseCode());

log.info(&quot;Heartbeat write status: &quot; + vars.get(&quot;HeartbeatWriteStatus&quot;));</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Heartbeat Telemetry Call" enabled="false">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;heartbeat_write&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${HeartbeatWriteStatus}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="WebSocket Single Read Sampler" enabled="false">
                          <boolProp name="TLS">false</boolProp>
                          <stringProp name="server"></stringProp>
                          <stringProp name="port">80</stringProp>
                          <stringProp name="path"></stringProp>
                          <stringProp name="connectTimeout">20000</stringProp>
                          <stringProp name="dataType">Text</stringProp>
                          <boolProp name="createNewConnection">false</boolProp>
                          <stringProp name="readTimeout">6000</stringProp>
                          <boolProp name="optional">false</boolProp>
                        </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
                        <hashTree>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="WebSocket Single Read Status" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">vars.put(&quot;WebSocketReadStatus&quot;, prev.getResponseCode());

log.info(&quot;Websocket read status: &quot; + vars.get(&quot;WebSocketReadStatus&quot;));</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract WebSocket Single Read Response" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">String responseStr = prev.getResponseDataAsString();
responseStr = responseStr.substring(0, responseStr.length()-1);

vars.put(&quot;WebSocketReadResponse&quot;, responseStr);</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WebSocket Single Read Telemetry Call" enabled="false">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;websocket_read&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${WebSocketReadStatus}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait for 30 seconds" enabled="true">
                          <intProp name="ActionProcessor.action">1</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">30000</stringProp>
                        </TestAction>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Continuation Read Sampler - ABS" enabled="true"/>
                    <hashTree>
                      <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="true">
                        <stringProp name="comparisonType">Contains</stringProp>
                        <stringProp name="TestPlan.comments">filters (i.e. discards) all ws text frames that are received by sampler in its scope</stringProp>
                        <stringProp name="matchValue">{&quot;type&quot;:6}&#x1e;</stringProp>
                      </eu.luminis.jmeter.wssampler.TextFrameFilter>
                      <hashTree/>
                      <eu.luminis.jmeter.wssampler.PingFrameFilter guiclass="eu.luminis.jmeter.wssampler.PingFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.PingFrameFilter" testname="Ping Frame Filter" enabled="true">
                        <boolProp name="replyToPing">false</boolProp>
                        <stringProp name="TestPlan.comments">This filter will receive the ping (and hide it for the read sampler) and reply with a pong.</stringProp>
                        <stringProp name="filterType">FilterAll</stringProp>
                      </eu.luminis.jmeter.wssampler.PingFrameFilter>
                      <hashTree/>
                      <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Receive Message Read Sampler - ABS" enabled="true">
                        <boolProp name="TLS">false</boolProp>
                        <stringProp name="server"></stringProp>
                        <stringProp name="port">80</stringProp>
                        <stringProp name="path"></stringProp>
                        <stringProp name="connectTimeout">20000</stringProp>
                        <stringProp name="dataType">Text</stringProp>
                        <boolProp name="createNewConnection">false</boolProp>
                        <stringProp name="readTimeout">20000</stringProp>
                        <boolProp name="optional">true</boolProp>
                      </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
                      <hashTree>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Update readSamplerResponse Single Frame" enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.util.ArrayList;
import java.net.URLEncoder;
import NotificationsQueue;
import Notification;

vars.put(&quot;ReadSamplerSuccess&quot;, prev.getResponseCode());
log.info(&quot;ReadSamplerSuccess: &quot; + vars.get(&quot;ReadSamplerSuccess&quot;));

vars.put(&quot;ReadSamplerSuccessNextFrame&quot;, &quot;&quot;);



	if(vars.get(&quot;ReadSamplerSuccess&quot;).equals(&quot;200&quot;))
	{
		String responseStr = prev.getResponseDataAsString();
		log.info(&quot;~~~ final websocket frame? ~~~ &quot; + Boolean.toString(${websocket.last_frame_final}));
		if (${websocket.last_frame_final}) 
		{
			log.info(&quot;stripped responseStr in 1st read&quot;);
			responseStr = responseStr.substring(0, responseStr.length()-1);
		}
		vars.put(&quot;ackRequired&quot;, &quot;false&quot;); // initialize ackRequired flag
		vars.put(&quot;readSamplerResponse&quot;, responseStr);
		log.info(&quot;readSamplerResponse just first frame: &quot; + vars.get(&quot;readSamplerResponse&quot;));
	}
	else 
	{
		log.info(&quot;readSamplerResponse failed due to read sampler time out&quot;);
	}
</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send first read sampler response to telemetry" enabled="false">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;read_sampler_response_first&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;sessionIdCsv&quot;:&quot;${sessionIdCsv}&quot;,&#xd;
	&quot;dupSessionIdCsv&quot;:&quot;${dupSessionIdCsv}&quot;,&#xd;
	&quot;receivedMsgCsv&quot;:&quot;${receivedMsgCsv}&quot;,&#xd;
	&quot;receivedFromCsv&quot;:&quot;${receivedFromCsv}&quot;,&#xd;
	&quot;receivedTimeCsv&quot;:&quot;${receivedTimeCsv}&quot;,&#xd;
	&quot;receivedChatIdCsv&quot;:&quot;${receivedChatIdCsv}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;entireResponse&quot;:&quot;${readSamplerResponse}&quot;,&#xd;
	&quot;rstatus&quot;:&quot;${ReadSamplerSuccess}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While last frame is not final" enabled="true">
                        <stringProp name="WhileController.condition">${__javaScript(! ${websocket.last_frame_final},)}</stringProp>
                      </WhileController>
                      <hashTree>
                        <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Receive Message Read Sampler Next Frame - ABS" enabled="true">
                          <boolProp name="TLS">false</boolProp>
                          <stringProp name="server"></stringProp>
                          <stringProp name="port">80</stringProp>
                          <stringProp name="path"></stringProp>
                          <boolProp name="binaryPayload">false</boolProp>
                          <boolProp name="createNewConnection">false</boolProp>
                          <boolProp name="optional">true</boolProp>
                          <stringProp name="connectTimeout">20000</stringProp>
                          <stringProp name="dataType">Text</stringProp>
                          <stringProp name="readTimeout">6000</stringProp>
                        </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
                        <hashTree>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Update readSamplerResponse Multi Frames" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.util.ArrayList;
import java.net.URLEncoder;
import NotificationsQueue;
import Notification;

vars.put(&quot;ReadSamplerSuccessNextFrame&quot;, prev.getResponseCode());
log.info(&quot;ReadSamplerSuccessNextFrame: &quot; + vars.get(&quot;ReadSamplerSuccessNextFrame&quot;));

String responseStr = prev.getResponseDataAsString();

if (${websocket.last_frame_final}) 
{
	log.info(&quot;stripped responseStr in next frame read&quot;);
	responseStr = responseStr.substring(0, responseStr.length()-1);
}

// update readSamplerResponse with appended string
vars.put(&quot;readSamplerResponse&quot;, vars.get(&quot;readSamplerResponse&quot;) + responseStr);
log.info(&quot;readSamplerResponse just next frame: &quot; + responseStr);</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send next read sampler response to telemetry" enabled="false">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;read_sampler_response_next&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;sessionIdCsv&quot;:&quot;${sessionIdCsv}&quot;,&#xd;
	&quot;dupSessionIdCsv&quot;:&quot;${dupSessionIdCsv}&quot;,&#xd;
	&quot;receivedMsgCsv&quot;:&quot;${receivedMsgCsv}&quot;,&#xd;
	&quot;receivedFromCsv&quot;:&quot;${receivedFromCsv}&quot;,&#xd;
	&quot;receivedTimeCsv&quot;:&quot;${receivedTimeCsv}&quot;,&#xd;
	&quot;receivedChatIdCsv&quot;:&quot;${receivedChatIdCsv}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;entireResponse&quot;:&quot;${readSamplerResponse}&quot;,&#xd;
	&quot;rstatus&quot;:&quot;${ReadSamplerSuccessNextFrame}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="GetAllSessionsFromWebSocketReadSampler" enabled="true">
                        <stringProp name="BeanShellSampler.query">import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.util.ArrayList;
import java.net.URLEncoder;
import NotificationsQueue;
import Notification;

try {
	log.info(&quot;readSamplerResponse overall: &quot; + vars.get(&quot;readSamplerResponse&quot;));
	responseStr = vars.get(&quot;readSamplerResponse&quot;);
	
	NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);
	HashMap chatIdToNotificationMap = vars.getObject(&quot;chatIdToNotificationMap&quot;);
	
	ArrayList notificationList = new ArrayList();
	String encodedresponse = &quot;&quot;;
	String sessionIds = &quot;&quot;;
	String dupSessionIds = &quot;&quot;;
	String containsMsg = &quot;0&quot;;
	String receivedMsgCsv = &quot;&quot;;
	String receivedTimeCsv = &quot;&quot;;
	String receivedFromCsv = &quot;&quot;;
	String receivedChatIdCsv = &quot;&quot;;

		if(vars.get(&quot;ReadSamplerSuccess&quot;).equals(&quot;200&quot;) &amp;&amp; (vars.get(&quot;ReadSamplerSuccessNextFrame&quot;).equals(&quot;200&quot;) || vars.get(&quot;ReadSamplerSuccessNextFrame&quot;).equals(&quot;&quot;))) // ReadSamplerSuccessNextFrame = &quot;200&quot; or &quot;&quot; if no multi frame read errors
		{
			JSONParser parser = new JSONParser();
			JSONObject response = (JSONObject)parser.parse(responseStr);
			encodedresponse = URLEncoder.encode(responseStr, &quot;UTF-8&quot;);
			respLength = responseStr.length();
			
			if(response.containsKey(&quot;arguments&quot;))
			{	           
			  JSONArray arguments = (JSONArray)response.get(&quot;arguments&quot;);
			  JSONObject messageRequestDetails = (JSONObject)arguments.get(0);
			  if (messageRequestDetails.containsKey(&quot;RequestType&quot;)) { // RequestType = 1, etc
			  	if (messageRequestDetails.containsKey(&quot;SessionId&quot;) &amp;&amp; messageRequestDetails.containsKey(&quot;ConversationId&quot;)) 
			  	{
			  		if (messageRequestDetails.containsKey(&quot;AckRequired&quot;) &amp;&amp; messageRequestDetails.containsKey(&quot;MessageId&quot;) &amp;&amp; messageRequestDetails.containsKey(&quot;SingleUserGroupName&quot;)) {
			  			String ackRequired = messageRequestDetails.get(&quot;AckRequired&quot;).toString();
			  			String messageId = messageRequestDetails.get(&quot;MessageId&quot;).toString();
			  			String controlMessageType = messageRequestDetails.get(&quot;RequestType&quot;).toString();
			  			String singleUserGroupName = messageRequestDetails.get(&quot;SingleUserGroupName&quot;).toString();
			  			vars.put(&quot;ackRequired&quot;, ackRequired);
						vars.put(&quot;messageId&quot;, messageId);
						vars.put(&quot;controlMessageType&quot;, controlMessageType);
						vars.put(&quot;singleUserGroupName&quot;, singleUserGroupName);
			  		}
			  		String sessionId = messageRequestDetails.get(&quot;SessionId&quot;).toString();
					String chatId = messageRequestDetails.get(&quot;ConversationId&quot;).toString();
					String requestType = messageRequestDetails.get(&quot;RequestType&quot;).toString();	
					//requestType = 2 is consult; please handle it for consult scenario later
			  		if((requestType.equals(&quot;1&quot;) || requestType.equals(&quot;3&quot;)) &amp;&amp; (!chatIdToNotificationMap.containsKey(chatId) || chatIdToNotificationMap.get(chatId).IsInviteReceived() == false))
			  		{
			  			String liveWorkItemId = messageRequestDetails.get(&quot;LiveWorkItemId&quot;).toString();
						String transactionId = messageRequestDetails.get(&quot;TransactionId&quot;).toString();							
						String organizationId = messageRequestDetails.get(&quot;OrganizationId&quot;).toString();
						String channelId = messageRequestDetails.get(&quot;ChannelId&quot;).toString();

						String conversationThreadId;
						if (messageRequestDetails.containsKey(&quot;ConversationThreadId&quot;))
						{
							if (messageRequestDetails.get(&quot;ConversationThreadId&quot;) != null)
							{
								conversationThreadId = messageRequestDetails.get(&quot;ConversationThreadId&quot;).toString();
							}
						}
						
						log.info(&quot;sessionId: &quot; +  sessionId);
						log.info(&quot;organizationId: &quot; +  organizationId);
						log.info(&quot;liveWorkItemId: &quot; +  liveWorkItemId);
						log.info(&quot;requestType: &quot; +  requestType);
						log.info(&quot;chatId: &quot; +  chatId);
						log.info(&quot;transactionId: &quot; +  transactionId);
						log.info(&quot;channelId: &quot; + channelId);
						log.info(&quot;conversationThreadId: &quot; + conversationThreadId);
	
						if(chatIdToNotificationMap.containsKey(chatId))
						{
							log.info(&quot;chatIdToNotificationMap.containsKey&quot;);
							Notification oldNotification = chatIdToNotificationMap.get(chatId);
							oldNotification.SetContext(sessionId, liveWorkItemId, requestType, transactionId, organizationId, channelId, conversationThreadId);
							notificationList.add(oldNotification);
						}
						else
						{
							log.info(&quot;chatIdToNotificationMap NOT containsKey&quot;);
							Notification newNotification = new Notification(chatId);
							newNotification.SetContext(sessionId, liveWorkItemId, requestType, transactionId, organizationId, channelId, conversationThreadId);
							notificationList.add(newNotification);
							chatIdToNotificationMap.put(chatId, newNotification);
						}
						sessionIds = sessionIds + &quot;|&quot; + sessionId;
			  		}
			  		else 
			  		{
			  			dupSessionIds = dupSessionIds + &quot;|&quot; + sessionId;
			  		}
			  	}
			  }
			  else if (messageRequestDetails.containsKey(&quot;Type&quot;)) { // Type = 2
			  	log.info(&quot;CONTROL MESSAGE!!!!!!!!!!!!!&quot;);
			  }
			}
		}
	
	notificationsQueue.AddReceivedNotifications(notificationList);
	vars.put(&quot;sessionIdCsv&quot;, sessionIds);
	vars.put(&quot;dupSessionIdCsv&quot;, dupSessionIds);
	vars.put(&quot;receivedMsgCsv&quot;, receivedMsgCsv);
	vars.put(&quot;receivedTimeCsv&quot;, receivedTimeCsv);
	vars.put(&quot;receivedFromCsv&quot;, receivedFromCsv);
	vars.put(&quot;receivedChatIdCsv&quot;, receivedChatIdCsv);
	
	log.info(&quot;notificationList.size(): &quot; + Integer.toString(notificationList.size()));
	if(notificationList.size() &gt; 0)
	{
		vars.put(&quot;firePreAcceptEvent&quot;, &quot;1&quot;);
		log.info(&quot;FIRING PRE ACCEPT EVENT!!!!!!!!!&quot;);
	}
	
	log.info(&quot;sessionIdCsv: &quot; + vars.get(&quot;sessionIdCsv&quot;));
	log.info(&quot;dupSessionIdCsv: &quot; + vars.get(&quot;dupSessionIdCsv&quot;));
	log.info(&quot;receivedMsgCsv: &quot; + vars.get(&quot;receivedMsgCsv&quot;));
	log.info(&quot;receivedTimeCsv: &quot; + vars.get(&quot;receivedTimeCsv&quot;));
	log.info(&quot;receivedFromCsv: &quot; + vars.get(&quot;receivedFromCsv&quot;));
	log.info(&quot;receivedChatIdCsv: &quot; + vars.get(&quot;receivedChatIdCsv&quot;));
}
catch (Exception ex) {
    	log.error(&quot;Error in Beanshell&quot;, ex);
    	throw ex;
}</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send overall read sampler response to telemetry" enabled="false">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;read_sampler_response_overall&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;sessionIdCsv&quot;:&quot;${sessionIdCsv}&quot;,&#xd;
	&quot;dupSessionIdCsv&quot;:&quot;${dupSessionIdCsv}&quot;,&#xd;
	&quot;receivedMsgCsv&quot;:&quot;${receivedMsgCsv}&quot;,&#xd;
	&quot;receivedFromCsv&quot;:&quot;${receivedFromCsv}&quot;,&#xd;
	&quot;receivedTimeCsv&quot;:&quot;${receivedTimeCsv}&quot;,&#xd;
	&quot;receivedChatIdCsv&quot;:&quot;${receivedChatIdCsv}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;entireResponse&quot;:&quot;${readSamplerResponse}&quot;,&#xd;
	&quot;rstatus&quot;:&quot;${ReadSamplerSuccess}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If message is received and ack required" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript((vars.get(&quot;ReadSamplerSuccess&quot;) == &quot;200&quot;) &amp;&amp; vars.get(&quot;ackRequired&quot;) == &quot;true&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="Delivery Ack Write Sampler" enabled="true">
                          <boolProp name="TLS">false</boolProp>
                          <stringProp name="server"></stringProp>
                          <stringProp name="port">80</stringProp>
                          <stringProp name="path"></stringProp>
                          <stringProp name="connectTimeout">20000</stringProp>
                          <boolProp name="binaryPayload">false</boolProp>
                          <stringProp name="requestData">{&quot;type&quot;:1, &quot;target&quot;:&quot;ControlMessageDeliveryAck&quot;, &quot;arguments&quot;:[{&quot;MessageId&quot;:&quot;${messageId}&quot;,&quot;ControlMessageType&quot;:1,&quot;SingleUserGroupName&quot;:&quot;${singleUserGroupName}&quot;,&quot;AckRequired&quot;:true}]}&#x1e;</stringProp>
                          <boolProp name="createNewConnection">false</boolProp>
                          <boolProp name="loadDataFromFile">false</boolProp>
                          <stringProp name="dataFile"></stringProp>
                        </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
                        <hashTree>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Delivery Ack Write Status" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">vars.put(&quot;DeliveryAckWriteStatus&quot;, prev.getResponseCode());

log.info(&quot;Delivery ack write status: &quot; + vars.get(&quot;DeliveryAckWriteStatus&quot;));</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delivery Ack Telemetry Call" enabled="false">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;delivery_ack_write&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;:&quot;${DeliveryAckWriteStatus}&quot;,&#xd;
	&quot;ackRequired&quot;:&quot;${ackRequired}&quot;,&#xd;
	&quot;messageId&quot;:&quot;${messageId}&quot;,&#xd;
	&quot;singleUserGroupName&quot;:&quot;${singleUserGroupName}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol">http</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Reset readSamplerResponse and ReadSamplerSuccessNextFrame" enabled="true">
                        <stringProp name="BeanShellSampler.query">log.info(&quot;reset readSamplerResponse and ReadSamplerSuccessNextFrame&quot;);

// reset readSamplerResponse
vars.put(&quot;readSamplerResponse&quot;, &quot;&quot;);

// reset ReadSamplerSuccessNextFrame to empty response code value
vars.put(&quot;ReadSamplerSuccessNextFrame&quot;, &quot;&quot;);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Reconnect if there is a sampler error" enabled="true">
                      <stringProp name="IfController.condition">${__javaScript((vars.get(&quot;ReadSamplerSuccess&quot;) == &quot;Sampler error&quot;) || (vars.get(&quot;ReadSamplerSuccess&quot;) == &quot;Sampler error: unexpected frame type (close).&quot;))}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                      <boolProp name="IfController.useExpression">true</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Negotiate" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">agentbackbone/negotiate?OrganizationId=${OrgId}&amp;ClientSessionId=${ClientSessionId}&amp;negotiateVersion=1</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Origin </stringProp>
                              <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Client Session Id" enabled="true">
                          <stringProp name="scriptLanguage">javascript</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="cacheKey">true</stringProp>
                          <stringProp name="script">var guidPattern = &quot;xx-x-4m-ym-xxx&quot;;
var newGuid = &quot;&quot;;

for (var i = 0; i &lt; guidPattern.length; i++) {
	var randomString = Math.floor(Math.random() * Date.now());
	switch (guidPattern[i]) {
		case &quot;x&quot;:
			newGuid += randomString.toString(16).substring(0, 4);
			break; //get 4 digit
		case &quot;m&quot;:
			newGuid += randomString.toString(16).substring(0, 3);
			break; //Get 3 digit
		case &quot;y&quot;:
			newGuid += (randomString &amp; 0x3 | 0x8).toString(16);
			break; // To get only one of 8, 9, A, or B
		default:
			newGuid += guidPattern[i]; //Default &quot;-&quot; and &quot;4&quot;
	}
}

vars.put(&quot;ClientSessionId&quot;, newGuid);
log.info(&quot;ClientSessionId: &quot; + vars.get(&quot;ClientSessionId&quot;));
</stringProp>
                        </JSR223PreProcessor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Agent Negotiate Call Status" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">AgentNegotiateStatus</stringProp>
                          <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">TransactionIdNegotiate</stringProp>
                          <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="AccessToken Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                          <stringProp name="RegexExtractor.refname">accessToken</stringProp>
                          <stringProp name="RegexExtractor.regex">accessToken&quot;:&quot;(.+?)&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="signalrURL Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">signalrURL</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;https://(.+?(?=\/))</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract Agent Negotiate Response" enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">String responseStr = prev.getResponseDataAsString();

vars.put(&quot;AgentNegotiateResponse&quot;, responseStr);</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - log signalrURL value" enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">try {	
	log.info(&quot;${signalrURL}&quot;);
}
catch (Exception ex) {
    	log.error(&quot;Error in Beanshell&quot;, ex);
    	throw ex;
}</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Negotiate Telemetry Call" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;agent_negotiate_retry&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${AgentNegotiateStatus}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Connection" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${signalrURL}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">client/negotiate?hub=controlmessagehub&amp;asrs.op=%2FcontrolMessageHub&amp;OrganizationId=${OrgId}&amp;ClientSessionId=${ClientSessionId}&amp;negotiateVersion=1&amp;ADUserId=${AgentAdId}&amp;TenantId=${TenantId}b&amp;asrs_request_id=zyZTqRIyAAA%3D</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">Bearer ${accessToken}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Origin </stringProp>
                              <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Agent Connection Call Status" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">AgentConnectionStatus</stringProp>
                          <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">TransactionIdConnect</stringProp>
                          <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ConnectionId Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                          <stringProp name="RegexExtractor.refname">connectionId</stringProp>
                          <stringProp name="RegexExtractor.regex">connectionId&quot;:&quot;(.+?)&quot;,</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract Agent Connection Response" enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">String responseStr = prev.getResponseDataAsString();

vars.put(&quot;AgentConnectionResponse&quot;, responseStr);</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent Connection Telemetry Call" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;agent_connection_retry&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${AgentConnectionStatus}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="Establish WebSocket Connection" enabled="true">
                        <boolProp name="TLS">true</boolProp>
                        <stringProp name="server">${signalrURL}</stringProp>
                        <stringProp name="port">443</stringProp>
                        <stringProp name="path">client/?hub=controlmessagehub&amp;asrs.op=%2FcontrolMessageHub&amp;OrganizationId=${OrgId}&amp;ClientSessionId=${ClientSessionId}&amp;negotiateVersion=1&amp;ADUserId=${AgentAdId}&amp;TenantId=${TenantId}&amp;asrs_request_id=zyZTqRIyAAA%3D&amp;id=${connectionId}&amp;access_token=${accessToken}</stringProp>
                        <stringProp name="connectTimeout">20000</stringProp>
                        <boolProp name="binaryPayload">false</boolProp>
                        <stringProp name="requestData">{&quot;protocol&quot;:&quot;json&quot;,&quot;version&quot;:1}&#x1e;</stringProp>
                        <boolProp name="createNewConnection">true</boolProp>
                        <boolProp name="loadDataFromFile">false</boolProp>
                        <stringProp name="dataFile"></stringProp>
                        <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
                      </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Sec-WebSocket-Extensions</stringProp>
                              <stringProp name="Header.value">permessage-deflate; client_max_window_bits</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Connection</stringProp>
                              <stringProp name="Header.value">Upgrade</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Origin</stringProp>
                              <stringProp name="Header.value">https://fpi.oc.crmlivetie.com</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Sec-WebSocket-Key</stringProp>
                              <stringProp name="Header.value">jcsZWIfA2tEKP/d8wuCdjA==</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Establish WebSocket Status" enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">vars.put(&quot;EstablishWebSocketStatus&quot;, prev.getResponseCode());

log.info(&quot;Establish websocket status: &quot; + vars.get(&quot;EstablishWebSocketStatus&quot;));</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Establish Websocket Telemetry Call" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;establish_websocket_retry&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${EstablishWebSocketStatus}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Empty Response Read Sampler" enabled="true">
                        <boolProp name="TLS">false</boolProp>
                        <stringProp name="server"></stringProp>
                        <stringProp name="port">80</stringProp>
                        <stringProp name="path"></stringProp>
                        <stringProp name="connectTimeout">20000</stringProp>
                        <stringProp name="dataType">Text</stringProp>
                        <boolProp name="createNewConnection">false</boolProp>
                        <stringProp name="readTimeout">6000</stringProp>
                        <boolProp name="optional">true</boolProp>
                      </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
                      <hashTree>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Empty Response Read Status" enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">vars.put(&quot;EmptyResponseReadStatus&quot;, prev.getResponseCode());

log.info(&quot;Empty response read status: &quot; + vars.get(&quot;EmptyResponseReadStatus&quot;));</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract Empty Response" enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">String responseStr = prev.getResponseDataAsString();
responseStr = responseStr.substring(0, responseStr.length()-1);

vars.put(&quot;EmptyResponse&quot;, responseStr);</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Empty Response Telemetry Call" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;read_empty_response_retry&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${EmptyResponse}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="AddToGroup Response Read Sampler" enabled="true">
                        <boolProp name="TLS">false</boolProp>
                        <stringProp name="server"></stringProp>
                        <stringProp name="port">80</stringProp>
                        <stringProp name="path"></stringProp>
                        <stringProp name="connectTimeout">20000</stringProp>
                        <stringProp name="dataType">Text</stringProp>
                        <boolProp name="createNewConnection">false</boolProp>
                        <stringProp name="readTimeout">6000</stringProp>
                        <boolProp name="optional">true</boolProp>
                      </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
                      <hashTree>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="AddToGroup Response Read Status" enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">vars.put(&quot;AddToGroupResponseReadStatus&quot;, prev.getResponseCode());

log.info(&quot;AddToGroup response read status: &quot; + vars.get(&quot;AddToGroupResponseReadStatus&quot;));</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract AddToGroup Response" enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">String responseStr = prev.getResponseDataAsString();
responseStr = responseStr.substring(0, responseStr.length()-1);

vars.put(&quot;AddToGroupResponse&quot;, responseStr);</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddToGroup Response Telemetry Call" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;read_addtogroup_response_retry&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${AddToGroupResponseReadStatus}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait for 30 seconds" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">30000</stringProp>
                      </TestAction>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Wait if Mock IC3" enabled="true">
                    <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;MockIC3&quot;) == &quot;true&quot; &amp;&amp; vars.get(&quot;UseSignalR&quot;) == &quot;false&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait for 30 seconds" enabled="true">
                      <intProp name="ActionProcessor.action">1</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration">30000</stringProp>
                    </TestAction>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Accept/Reject/Timeout Controller" enabled="true"/>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;firePreAcceptEvent&quot;) == &quot;1&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Received Notifications" enabled="true">
                      <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.List;
import java.util.ArrayList;

vars.put(&quot;firePreAcceptEvent&quot;, &quot;0&quot;);

NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);

ArrayList receivedNotifications = notificationsQueue.GetReceivedNotifications();

log.info(&quot;receivedNotifications.size() in Get Received Notifications: &quot; + Integer.toString(receivedNotifications.size()));

for(int i=0; i&lt;receivedNotifications.size(); i++)
{
	vars.putObject(&quot;receivedNotification_&quot;+(i+1), receivedNotifications.get(i));
}
vars.putObject(&quot;receivedNotifications&quot;, receivedNotifications);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Received Notification" enabled="true">
                      <stringProp name="ForeachController.inputVal">receivedNotification</stringProp>
                      <stringProp name="ForeachController.returnVal">receivedNotification</stringProp>
                      <boolProp name="ForeachController.useSeparator">true</boolProp>
                    </ForeachController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set TypeOfAction" enabled="true">
                        <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.List;
import java.util.ArrayList;

Notification receivedNotification = vars.getObject(&quot;receivedNotification&quot;);

String preAcceptSessionId = receivedNotification.GetSessionId();
String preAcceptLiveWorkItemId = receivedNotification.GetLiveWorkItemId();
String preAcceptChatId = receivedNotification.GetChatId();

vars.put(&quot;PreAcceptSessionId&quot;, preAcceptSessionId);
vars.put(&quot;PreAcceptLiveWorkItemId&quot;, preAcceptLiveWorkItemId);
vars.put(&quot;PreAcceptChatId&quot;, preAcceptChatId);


ActionDecider ad = vars.getObject(&quot;actionDecider&quot;);
vars.put(&quot;typeOfPreAcceptAction&quot;, ad.GetNextPreAcceptAction());

log.info(&quot;typeOfPreAcceptAction: &quot; + vars.get(&quot;typeOfPreAcceptAction&quot;));</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;typeOfPreAcceptAction&quot;) == &quot;Accept&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accept Session Event" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
              &#xd;
            &quot;SessionId&quot; :  &quot;${PreAcceptSessionId}&quot;,&#xd;
            &quot;ClientSessionEvent&quot; : &quot;702&quot;,&#xd;
            &quot;LiveWorkItemId&quot; : &quot;${PreAcceptLiveWorkItemId}&quot;,&#xd;
            &quot;Payload&quot; : {&quot;AgentId&quot;: &quot;${AgentId}&quot;}&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response Status" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">PreAcceptResponse</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">PreAcceptTransactionId</stringProp>
                            <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">TenantId</stringProp>
                                <stringProp name="Header.value">${TenantId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">OrganizationId</stringProp>
                                <stringProp name="Header.value">${OrgId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">ADUserId</stringProp>
                                <stringProp name="Header.value">${AgentAdId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check for OC Token Failure" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;PreAcceptResponse&quot;) != &quot;200&quot;)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                          <boolProp name="IfController.useExpression">true</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken after accept event failure" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid&amp;client_secret=${clientsecret}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="OC Token HTTP Cookie" enabled="true">
                              <collectionProp name="CookieManager.cookies"/>
                              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                            </CookieManager>
                            <hashTree/>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="OC Token HTTP Header" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">client-request-id</stringProp>
                                  <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract OC Token" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">ocToken</stringProp>
                              <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accept Session Event Retry" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">{&#xd;
              &#xd;
            &quot;SessionId&quot; :  &quot;${PreAcceptSessionId}&quot;,&#xd;
            &quot;ClientSessionEvent&quot; : &quot;702&quot;,&#xd;
            &quot;LiveWorkItemId&quot; : &quot;${PreAcceptLiveWorkItemId}&quot;,&#xd;
            &quot;Payload&quot; : {&quot;AgentId&quot;: &quot;${AgentId}&quot;}&#xd;
}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">TenantId</stringProp>
                                  <stringProp name="Header.value">${OrgId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">OrganizationId</stringProp>
                                  <stringProp name="Header.value">${OrgId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">ADUserId</stringProp>
                                  <stringProp name="Header.value">${AgentAdId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response Status" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                              <stringProp name="RegexExtractor.refname">PreAcceptResponse</stringProp>
                              <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                              <stringProp name="RegexExtractor.refname">PreAcceptTransactionId</stringProp>
                              <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accept Session telemetry call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{	&#xd;
	&quot;eventName&quot;:&quot;session_accept&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${PreAcceptTransactionId}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;${PreAcceptLiveWorkItemId}&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;${PreAcceptSessionId}&quot;,&#xd;
	&quot;chatId&quot;:&quot;${PreAcceptChatId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${PreAcceptResponse}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Move Notification to Accepted or Traversed" enabled="true">
                          <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.ArrayList;

try {
	Notification receivedNotification = vars.getObject(&quot;receivedNotification&quot;);
	NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);
	
	String isMockIC3 = vars.get(&quot;MockIC3&quot;);
	Integer messageLimit = Integer.valueOf(vars.get(&quot;MessageLimit&quot;));
	String isSendMessageEnabled = vars.get(&quot;SendMessageEnabled&quot;);
	String channelId = receivedNotification.GetChannelId().toLowerCase();
	
	// send message only when:
	// 1: isSendMessageEnabled = true	AND
	// (
	// 2: (live chat &amp;&amp; not mock &amp;&amp; messageLimit &gt; 0)	OR
	// 3: (not live chat &amp;&amp; mock &amp;&amp; channelMessageLimit &gt; 0)
	// )
	if(isSendMessageEnabled == &quot;false&quot; || ((!channelId.equals(&quot;lcw&quot;) || isMockIC3 == &quot;true&quot; || messageLimit &lt;= 0) &amp;&amp; (channelId.equals(&quot;lcw&quot;) || isMockIC3 == &quot;false&quot; || Integer.valueOf(vars.get(vars.get(channelId))) &lt;= 0)))
	{
		log.info(&quot;Adding notifications for transferring..&quot;);
		log.info(&quot;channelId: &quot; + channelId);
		int NotificationsAdded = notificationsQueue.AddTraversedNotification(receivedNotification);
	
		log.info(NotificationsAdded + &quot; of 1 received notifications added.&quot;);
		vars.put(&quot;firePostAcceptEvent&quot;, &quot;1&quot;);
	}
	else
	{
		log.info(&quot;Adding notifications for sending messages..&quot;);
		log.info(&quot;channelId: &quot; + channelId);
		int NotificationsAdded = notificationsQueue.AddAcceptedNotification(receivedNotification);
	
		log.info(NotificationsAdded + &quot; of 1 received notifications added.&quot;);
		vars.put(&quot;fireSendEvent&quot;, &quot;1&quot;);
	}
}
catch (Exception ex) {
    	log.error(&quot;Error in Beanshell&quot;, ex);
    	throw ex;
}

</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;typeOfPreAcceptAction&quot;) == &quot;Reject&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Reject Session Event" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
              &#xd;
            &quot;SessionId&quot; :  &quot;${PreAcceptSessionId}&quot;,&#xd;
            &quot;ClientSessionEvent&quot; : &quot;703&quot;,&#xd;
            &quot;LiveWorkItemId&quot; : &quot;${PreAcceptLiveWorkItemId}&quot;,&#xd;
            &quot;Payload&quot; : {&quot;AgentId&quot;: &quot;${AgentId}&quot;}&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response Status" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">PreAcceptResponse</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">PreAcceptTransactionId</stringProp>
                            <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">TenantId</stringProp>
                                <stringProp name="Header.value">${TenantId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">OrganizationId</stringProp>
                                <stringProp name="Header.value">${OrgId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">ADUserId</stringProp>
                                <stringProp name="Header.value">${AgentAdId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check for OC Token Failure" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;PreAcceptResponse&quot;) != &quot;200&quot;)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                          <boolProp name="IfController.useExpression">true</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken after accept event failure" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid&amp;client_secret=${clientsecret}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="OC Token HTTP Cookie" enabled="true">
                              <collectionProp name="CookieManager.cookies"/>
                              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                            </CookieManager>
                            <hashTree/>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="OC Token HTTP Header" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">client-request-id</stringProp>
                                  <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract OC Token" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">ocToken</stringProp>
                              <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Reject Session Event Retry" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">{&#xd;
              &#xd;
            &quot;SessionId&quot; :  &quot;${PreAcceptSessionId}&quot;,&#xd;
            &quot;ClientSessionEvent&quot; : &quot;703&quot;,&#xd;
            &quot;LiveWorkItemId&quot; : &quot;${PreAcceptLiveWorkItemId}&quot;,&#xd;
            &quot;Payload&quot; : {&quot;AgentId&quot;: &quot;${AgentId}&quot;}&#xd;
}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">TenantId</stringProp>
                                  <stringProp name="Header.value">${OrgId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">OrganizationId</stringProp>
                                  <stringProp name="Header.value">${OrgId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">ADUserId</stringProp>
                                  <stringProp name="Header.value">${AgentAdId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response Status" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                              <stringProp name="RegexExtractor.refname">PreAcceptResponse</stringProp>
                              <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">PreAcceptTransactionId</stringProp>
                              <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Reject Session telemetry call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{	&#xd;
	&quot;eventName&quot;:&quot;session_reject&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${PreAcceptTransactionId}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;${PreAcceptLiveWorkItemId}&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;${PreAcceptSessionId}&quot;,&#xd;
	&quot;chatId&quot;:&quot;${PreAcceptChatId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${PreAcceptResponse}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Remove Notification From Map" enabled="true">
                          <stringProp name="BeanShellSampler.query">String chatId = vars.get(&quot;PreAcceptChatId&quot;);
HashMap chatIdToNotificationMap = vars.getObject(&quot;chatIdToNotificationMap&quot;);
Notification notification = chatIdToNotificationMap.get(chatId);
String sessionId = notification.GetSessionId();
log.info(&quot;Removing sessionId: &quot; + sessionId + &quot; from map&quot;);
chatIdToNotificationMap.remove(chatId);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;typeOfPreAcceptAction&quot;) == &quot;Timeout&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Add Notification into TimeoutQueue" enabled="true">
                          <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;

Notification receivedNotification = vars.getObject(&quot;receivedNotification&quot;);
NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);
notificationsQueue.AddTimedoutNotification(receivedNotification);



</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Remove Notification From Map" enabled="true">
                          <stringProp name="BeanShellSampler.query">String chatId = vars.get(&quot;PreAcceptChatId&quot;);
HashMap chatIdToNotificationMap = vars.getObject(&quot;chatIdToNotificationMap&quot;);
Notification notification = chatIdToNotificationMap.get(chatId);
String sessionId = notification.GetSessionId();
log.info(&quot;Removing sessionId: &quot; + sessionId + &quot; from map&quot;);
chatIdToNotificationMap.remove(chatId);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Remove Notifications from cache" enabled="true">
                      <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.ArrayList;

ArrayList receivedNotifications = vars.getObject(&quot;receivedNotifications&quot;);

log.info(&quot;receivedNotifications.size() in Remove Notifications from cache: &quot; + Integer.toString(receivedNotifications.size()));

for(int i=0; i&lt;receivedNotifications.size(); i++)
{
	vars.remove(&quot;receivedNotification_&quot;+(i+1));
}



</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Send Controller" enabled="true"/>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;fireSendEvent&quot;) == &quot;1&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Accepted Notifications" enabled="true">
                      <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.List;
import java.util.ArrayList;

vars.put(&quot;fireSendEvent&quot;, &quot;0&quot;);

NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);

ArrayList acceptedNotifications = notificationsQueue.GetAcceptedNotifications();

for(int i=0; i&lt;acceptedNotifications.size(); i++)
{
	vars.putObject(&quot;acceptedNotification_&quot;+(i+1), acceptedNotifications.get(i));
}
vars.putObject(&quot;acceptedNotifications&quot;, acceptedNotifications);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Reset SentMessageCount to 0" enabled="true">
                      <stringProp name="BeanShellSampler.query">vars.put(&quot;SentMessageCount&quot;, &quot;0&quot;);
vars.put(&quot;SendMessageCheck&quot;, &quot;1&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                      <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;SendMessageCheck&quot;) == &quot;1&quot;)}</stringProp>
                    </WhileController>
                    <hashTree>
                      <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Accepted Notification" enabled="true">
                        <stringProp name="ForeachController.inputVal">acceptedNotification</stringProp>
                        <stringProp name="ForeachController.returnVal">acceptedNotification</stringProp>
                        <boolProp name="ForeachController.useSeparator">true</boolProp>
                      </ForeachController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Extract ChatId" enabled="true">
                          <stringProp name="BeanShellSampler.query">import Notification;

Notification acceptedNotification = vars.getObject(&quot;acceptedNotification&quot;);
String chatId = acceptedNotification.GetChatId();

vars.put(&quot;ChatId&quot;, chatId);

String sendMsgTransactionId = acceptedNotification.GetTransactionId();
String sendMsgSessionId = acceptedNotification.GetSessionId();
String sendMsgLiveWorkItemId = acceptedNotification.GetLiveWorkItemId();
String sendMsgChannelId = acceptedNotification.GetChannelId().toLowerCase();

vars.put(&quot;SendMsgTransactionId&quot;, sendMsgTransactionId);
vars.put(&quot;SendMsgSessionId&quot;, sendMsgSessionId);
vars.put(&quot;SendMsgLiveWorkItemId&quot;, sendMsgLiveWorkItemId);
vars.put(&quot;sendMsgChannelId&quot;, sendMsgChannelId);

String conversationThreadId = acceptedNotification.GetConversationThreadId();
if (conversationThreadId != null)
{
	vars.put(&quot;SendMsgConversationThreadId&quot;, conversationThreadId);	
}</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Construct Message" enabled="true">
                          <stringProp name="BeanShellSampler.query">String message = &quot;Hello &quot; + vars.get(&quot;SentMessageCount&quot;) + &quot; From Agent for channel &quot; + vars.get(&quot;sendMsgChannelId&quot;);
vars.put(&quot;message&quot;, message);</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;MockIC3&quot;) == &quot;false&quot; &amp;&amp; vars.get(&quot;SendMessageEnabled&quot;) == &quot;true&quot; &amp;&amp; vars.get(&quot;sendMsgChannelId&quot;) == &quot;lcw&quot; &amp;&amp; vars.get(vars.get(vars.get(&quot;sendMsgChannelId&quot;))).toInteger() &gt; 0)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                          <boolProp name="IfController.useExpression">true</boolProp>
                        </IfController>
                        <hashTree>
                          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;UseSignalR&quot;) == &quot;true&quot; || &quot;true&quot; == &quot;true&quot;)}</stringProp>
                            <boolProp name="IfController.evaluateAll">false</boolProp>
                            <boolProp name="IfController.useExpression">true</boolProp>
                          </IfController>
                          <hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send ACS Message" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;EventType&quot;: &quot;Microsoft.Communication.ChatMessageReceived&quot;,&#xd;
        &quot;Data&quot;: {&#xd;
            &quot;MessageId&quot;: &quot;${__Random(1000000000000,9999999999999)}&quot;,&#xd;
            &quot;SenderId&quot;: &quot;${ACSGlobalAgentUserId}&quot;,&#xd;
            &quot;RecipientId&quot;: &quot;${ACSGlobalCustomerUserId}&quot;,&#xd;
            &quot;ThreadId&quot;: &quot;${ChatId}&quot;,&#xd;
            &quot;Type&quot;: &quot;Text&quot;,&#xd;
            &quot;MessageBody&quot;: &quot;test message&quot;,&#xd;
            &quot;SenderDisplayName&quot;: &quot;Agent&quot;,&#xd;
            &quot;TransactionId&quot;: &quot;${TransactionId}&quot;,&#xd;
            &quot;Metadata&quot;: {&#xd;
            	&quot;deliveryMode&quot; : &quot;bridged&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;subject&quot;: &quot;recipient/${ACSGlobalCustomerUserId}&quot;&#xd;
    }&#xd;
]&#xd;
</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                              <stringProp name="HTTPSampler.path">/acs/outbound/event?orgId=${OrgId}&amp;resourceName=${ACSResourceName}</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                                <collectionProp name="HeaderManager.headers">
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Content-Type</stringProp>
                                    <stringProp name="Header.value">application/json</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </HeaderManager>
                              <hashTree/>
                              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                                <boolProp name="resetInterpreter">false</boolProp>
                                <stringProp name="parameters"></stringProp>
                                <stringProp name="filename"></stringProp>
                                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().removeHeaderNamed(&quot;Authorization&quot;);
sampler.getHeaderManager().add(new Header(&quot;Authorization&quot;, &quot;Bearer &quot; + vars.get(&quot;MessagingToken&quot;)));</stringProp>
                              </BeanShellPreProcessor>
                              <hashTree/>
                              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get messaging call status" enabled="true">
                                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                                <stringProp name="RegexExtractor.refname">SendMessageResponse</stringProp>
                                <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) .+?</stringProp>
                                <stringProp name="RegexExtractor.template">$1$</stringProp>
                                <stringProp name="RegexExtractor.default"></stringProp>
                                <stringProp name="RegexExtractor.match_number"></stringProp>
                              </RegexExtractor>
                              <hashTree/>
                              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                                <stringProp name="RegexExtractor.refname">TransactionId</stringProp>
                                <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                                <stringProp name="RegexExtractor.template">$1$</stringProp>
                                <stringProp name="RegexExtractor.default"></stringProp>
                                <stringProp name="RegexExtractor.match_number"></stringProp>
                              </RegexExtractor>
                              <hashTree/>
                            </hashTree>
                          </hashTree>
                          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;UseSignalR&quot;) == &quot;false&quot; &amp;&amp; &quot;true&quot; == &quot;false&quot;)}</stringProp>
                            <boolProp name="IfController.evaluateAll">false</boolProp>
                            <boolProp name="IfController.useExpression">true</boolProp>
                          </IfController>
                          <hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Message" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">{&#xd;
	&quot;contenttype&quot;:&quot;text&quot;,&#xd;
	&quot;composetime&quot;:&quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;)}&quot;,&#xd;
	&quot;clientmessageid&quot;:&quot;1535041125609&quot;,&#xd;
	&quot;content&quot;:&quot;${message}&quot;,&#xd;
	&quot;messagetype&quot;:&quot;RichText/Html&quot;,&#xd;
	&quot;Has-Mentions&quot;:&quot;false&quot;,&#xd;
	&quot;properties&quot;:&#xd;
	{&#xd;
		&quot;deliveryMode&quot;:&quot;bridged&quot;&#xd;
	}&#xd;
}</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${PRODUrl}</stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">v1/users/ME/conversations/${ChatId}/messages</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                                <collectionProp name="HeaderManager.headers">
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Content-Type</stringProp>
                                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">RegistrationToken</stringProp>
                                    <stringProp name="Header.value">${RegistrationToken}</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Expires</stringProp>
                                    <stringProp name="Header.value">0</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </HeaderManager>
                              <hashTree/>
                              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Response Extractor" enabled="true">
                                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                                <stringProp name="RegexExtractor.refname">SendMessageResponse</stringProp>
                                <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) .+?</stringProp>
                                <stringProp name="RegexExtractor.template">$1$</stringProp>
                                <stringProp name="RegexExtractor.default"></stringProp>
                                <stringProp name="RegexExtractor.match_number"></stringProp>
                              </RegexExtractor>
                              <hashTree/>
                              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update SentMessage List" enabled="true">
                                <stringProp name="cacheKey">false</stringProp>
                                <stringProp name="filename"></stringProp>
                                <stringProp name="parameters"></stringProp>
                                <stringProp name="script">import Notification;

log.info (&quot;Called v1/users/ME/conversations/${ChatId}/messages: SendMessageResponse For ChatId ${ChatId} :  ${SendMessageResponse}&quot;)

if(vars.get(&quot;SendMessageResponse&quot;) == &quot;201&quot;)
{
	Notification acceptedNotification = vars.getObject(&quot;acceptedNotification&quot;);
	acceptedNotification.AddSentMessage(vars.get(&quot;message&quot;));
	log.info(&quot;Added Message: \&quot;${message}\&quot; to sent message list for chatid: ${ChatId}&quot;);
}
</stringProp>
                                <stringProp name="scriptLanguage">groovy</stringProp>
                              </JSR223PostProcessor>
                              <hashTree/>
                            </hashTree>
                          </hashTree>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;MockIC3&quot;) == &quot;true&quot; &amp;&amp; vars.get(&quot;SendMessageEnabled&quot;) == &quot;true&quot; &amp;&amp; vars.get(&quot;sendMsgChannelId&quot;) != &quot;lcw&quot; &amp;&amp; vars.get(vars.get(vars.get(&quot;sendMsgChannelId&quot;))).toInteger() &gt; 0)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                          <boolProp name="IfController.useExpression">true</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Mocked Message to Messaging Service" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">{&#xd;
	&quot;ChatMessage&quot;: {&#xd;
		&quot;Content&quot;: &quot;${message}&quot;,&#xd;
		&quot;From&quot;: &quot;${AgentId}&quot;,&#xd;
		&quot;IsBridged&quot;: &quot;true&quot;&#xd;
	},&#xd;
	&quot;Provider&quot;: &quot;Mock&quot;,&#xd;
	&quot;OrganizationId&quot;: &quot;${OrgId}&quot;,&#xd;
	&quot;ConversationId&quot;: &quot;${SendMsgLiveWorkItemId}&quot;,&#xd;
	&quot;QueryParameters&quot;: &quot;&quot;&#xd;
}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${PRODUrl}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">MSNotifyEvents/notifyevents?OrganizationId=${OrgId}</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Response Extractor" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                              <stringProp name="RegexExtractor.refname">SendMessageResponse</stringProp>
                              <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) .+?</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update SentMessage List" enabled="true">
                              <stringProp name="cacheKey">false</stringProp>
                              <stringProp name="filename"></stringProp>
                              <stringProp name="parameters"></stringProp>
                              <stringProp name="script">import Notification;

log.info (&quot;Called MSNotifyEvents/notifyevents?OrganizationId=${OrgId}: SendMessageResponse For ConversationId ${SendMsgLiveWorkItemId} :  ${SendMessageResponse}&quot;)

if(vars.get(&quot;SendMessageResponse&quot;) == &quot;201&quot;)
{
	Notification acceptedNotification = vars.getObject(&quot;acceptedNotification&quot;);
	acceptedNotification.AddSentMessage(vars.get(&quot;message&quot;));
	log.info(&quot;Added Message: \&quot;${message}\&quot; to sent message list for chatid: ${ChatId}&quot;);
}
</stringProp>
                              <stringProp name="scriptLanguage">groovy</stringProp>
                            </JSR223PostProcessor>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Sentiment Analysis Controller" enabled="true">
                          <stringProp name="IfController.condition">true</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                          <boolProp name="IfController.useExpression">true</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check OCSS Sentiment Analysis" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/ocss/conversationsentiment/${OrgId}/${SendMsgLiveWorkItemId}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">OrganizationId</stringProp>
                                  <stringProp name="Header.value">${OrgId}</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Sentiment Intensity Extractor" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">intensity</stringProp>
                              <stringProp name="RegexExtractor.regex">intensity&quot;:(.+?),</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Message telemetry call" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;send_message&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${SendMsgTransactionId}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;${SendMsgLiveWorkItemId}&quot;,&#xd;
	&quot;chatId&quot;:&quot;${ChatId}&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;${SendMsgSessionId}&quot;,&#xd;
	&quot;message&quot;: &quot;${message}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${SendMessageResponse}&quot;,&#xd;
	&quot;sentimentIntensity&quot;: &quot;${intensity}&quot;&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">localhost</stringProp>
                          <stringProp name="HTTPSampler.port">3000</stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">telemetry</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Update SentMessage Count" enabled="true">
                        <stringProp name="BeanShellSampler.query">try {
	Integer count = Integer.valueOf(vars.get(&quot;SentMessageCount&quot;)) + 1;
	
	String channelId = vars.get(&quot;sendMsgChannelId&quot;);
	String channelMessageLimitKey = vars.get(channelId);
	Integer maxCount = Integer.valueOf(vars.get(channelMessageLimitKey));
	
	log.info (&quot;channelId: &quot; + channelId);
	log.info (&quot;count/maxCount: &quot; + count + &quot;/&quot; + maxCount);
	
	vars.put(&quot;SentMessageCount&quot;, count.toString());
	if(count &gt;= maxCount)
	{
		vars.put(&quot;SendMessageCheck&quot;, &quot;0&quot;);
		log.info (&quot;Stopping Sending Messages Since Maximum Count Has Exceeded.&quot;);
	}
}
catch (Exception ex) {
    	log.error(&quot;Error in Beanshell&quot;, ex);
    	throw ex;
}</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait for 1 second before next message" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">${SendMessageWaitTime}</stringProp>
                      </TestAction>
                      <hashTree/>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Move Notifications To Traversed" enabled="true">
                      <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.ArrayList;

ArrayList acceptedNotifications = vars.getObject(&quot;acceptedNotifications&quot;);
NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);

log.info(&quot;Adding notifications for closing..&quot;);
int NotificationsAdded = notificationsQueue.AddTraversedNotifications(acceptedNotifications);

vars.put(&quot;firePostAcceptEvent&quot;, &quot;1&quot;);

log.info(NotificationsAdded + &quot; of &quot; + acceptedNotifications.size() + &quot; accepted notifications added.&quot;);
for(int i=0; i&lt;acceptedNotifications.size(); i++)
{
	vars.remove(&quot;acceptedNotification_&quot;+(i+1));
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transfer/TransferToQueue Controller" enabled="true"/>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;firePostAcceptEvent&quot;) == &quot;1&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Traversed Notifications" enabled="true">
                      <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.List;
import java.util.ArrayList;

log.info(&quot;nisha&quot;);

vars.put(&quot;firePostAcceptEvent&quot;, &quot;0&quot;);

NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);

ArrayList traversedNotifications = notificationsQueue.GetTraversedNotifications();
log.info(&quot;traversedSize: &quot; + traversedNotifications.size());
for(int i=0; i&lt;traversedNotifications.size(); i++)
{
	vars.putObject(&quot;traversedNotification_&quot;+(i+1), traversedNotifications.get(i));
}
vars.putObject(&quot;traversedNotifications&quot;, traversedNotifications);

log.info(&quot;agrawal&quot;);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Traversed Notification" enabled="true">
                      <stringProp name="ForeachController.inputVal">traversedNotification</stringProp>
                      <stringProp name="ForeachController.returnVal">traversedNotification</stringProp>
                      <boolProp name="ForeachController.useSeparator">true</boolProp>
                    </ForeachController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set TypeOfAction" enabled="true">
                        <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.List;
import java.util.ArrayList;

Notification traversedNotification = vars.getObject(&quot;traversedNotification&quot;);

String postAcceptSessionId = traversedNotification.GetSessionId();
String postAcceptLiveWorkItemId = traversedNotification.GetLiveWorkItemId();
String postAcceptChatId = traversedNotification.GetChatId();

vars.put(&quot;PostAcceptSessionId&quot;, postAcceptSessionId);
vars.put(&quot;PostAcceptLiveWorkItemId&quot;, postAcceptLiveWorkItemId);
vars.put(&quot;PostAcceptChatId&quot;, postAcceptChatId);


ActionDecider ad = vars.getObject(&quot;actionDecider&quot;);
vars.put(&quot;typeOfPostAcceptAction&quot;, ad.GetNextPostAcceptAction());</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;typeOfPostAcceptAction&quot;) == &quot;None&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Move Notification to Active For Closing" enabled="true">
                          <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.ArrayList;

Notification traversedNotification = vars.getObject(&quot;traversedNotification&quot;);
NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);

log.info(&quot;Adding notifications for closing messages..&quot;);
int NotificationsAdded = notificationsQueue.AddActiveNotification(traversedNotification);
log.info(NotificationsAdded + &quot; of 1 traversed notifications added.&quot;);


</stringProp>
                          <stringProp name="BeanShellSampler.filename"></stringProp>
                          <stringProp name="BeanShellSampler.parameters"></stringProp>
                          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                        </BeanShellSampler>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;typeOfPostAcceptAction&quot;) == &quot;Transfer&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Agents For Transfer" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">agentService/agents?command=transfer&amp;orgId=${OrgId}&amp;agentId=${AgentId}&amp;sessionId=${PostAcceptSessionId}&amp;liveWorkItemId=${PostAcceptLiveWorkItemId}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Response Status" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">GetAgentsResponse</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">TenantId</stringProp>
                                <stringProp name="Header.value">${TenantId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">OrganizationId</stringProp>
                                <stringProp name="Header.value">${OrgId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">ADUserId</stringProp>
                                <stringProp name="Header.value">${AgentAdId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract Agents Information" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.util.ArrayList;
import java.net.URLEncoder;
import NotificationsQueue;
import Notification;
log.info(&quot;GetAgentsResponse: &quot; + vars.get(&quot;GetAgentsResponse&quot;));

Integer agentsFound = 0;

if(vars.get(&quot;GetAgentsResponse&quot;).equals(&quot;200&quot;))
{
	String responseStr = prev.getResponseDataAsString();
	JSONParser parser = new JSONParser();
	log.info(&quot;pass1&quot;);
	log.info(&quot;responseStr is: &quot; + responseStr);
	log.info(&quot;pass2&quot;);
	JSONArray response = (JSONArray)parser.parse(responseStr);
	log.info(&quot;pass3&quot;);
	agentsFound = response.size();
	if(agentsFound &gt; 0)
	{
		Random rand = new Random();
		int index = rand.nextInt(response.size());
		JSONObject agentObj = (JSONObject)response.get(index);
		String agentId = agentObj.get(&quot;agentId&quot;).toString();
		String agentAADId = agentObj.get(&quot;agentAADId&quot;).toString();
		String agentName = agentObj.get(&quot;agentName&quot;).toString();

		log.info(&quot;TransferAgentId: &quot; + agentId);
		log.info(&quot;TransferAgentAADId: &quot; + agentAADId);
		log.info(&quot;TransferAgentName: &quot; + agentName);
		vars.put(&quot;TransferAgentId&quot;, agentId);
		vars.put(&quot;TransferAgentAADId&quot;, agentAADId);
		vars.put(&quot;TransferAgentName&quot;, agentName);	
	}

	vars.put(&quot;AgentsFound&quot;, agentsFound.toString());
}

</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If agents found for transfer" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;AgentsFound&quot;) != &quot;0&quot;)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                          <boolProp name="IfController.useExpression">true</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Session Event" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">{&#xd;
              &#xd;
              &quot;SessionId&quot; :  &quot;${PostAcceptSessionId}&quot;,&#xd;
              &quot;ClientSessionEvent&quot; : &quot;705&quot;,&#xd;
              &quot;LiveWorkItemId&quot; : &quot;${PostAcceptLiveWorkItemId}&quot;,&#xd;
              &quot;Payload&quot; : {&#xd;
         					&quot;AgentId&quot;: &quot;${TransferAgentId}&quot;,&#xd;
         					&quot;AgentAadID&quot;: &quot;${TransferAgentAADId}&quot;,&#xd;
			              	&quot;AgentName&quot; : &quot;${TransferAgentName}&quot;,&#xd;
			              	&quot;AgentType&quot; : &quot;HumanAgent&quot;&#xd;
		              	 }&#xd;
}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Transfer Session Response Extractor" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                              <stringProp name="RegexExtractor.refname">TransferResponse</stringProp>
                              <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">TenantId</stringProp>
                                  <stringProp name="Header.value">${TenantId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">OrganizationId</stringProp>
                                  <stringProp name="Header.value">${OrgId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">ADUserId</stringProp>
                                  <stringProp name="Header.value">${AgentAdId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                              <stringProp name="RegexExtractor.refname">PostAcceptTransactionId</stringProp>
                              <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                          </hashTree>
                          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check for OC Token Failure" enabled="true">
                            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;TransferResponse&quot;) != &quot;200&quot;)}</stringProp>
                            <boolProp name="IfController.evaluateAll">false</boolProp>
                            <boolProp name="IfController.useExpression">true</boolProp>
                          </IfController>
                          <hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken after accept event failure" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid&amp;client_secret=${clientsecret}</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
                              <stringProp name="HTTPSampler.method">GET</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="OC Token HTTP Cookie" enabled="true">
                                <collectionProp name="CookieManager.cookies"/>
                                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                              </CookieManager>
                              <hashTree/>
                              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="OC Token HTTP Header" enabled="true">
                                <collectionProp name="HeaderManager.headers">
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Accept</stringProp>
                                    <stringProp name="Header.value">application/json</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">client-request-id</stringProp>
                                    <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Content-Type</stringProp>
                                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </HeaderManager>
                              <hashTree/>
                              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract OC Token" enabled="true">
                                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                <stringProp name="RegexExtractor.refname">ocToken</stringProp>
                                <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                                <stringProp name="RegexExtractor.template">$1$</stringProp>
                                <stringProp name="RegexExtractor.default"></stringProp>
                                <stringProp name="RegexExtractor.match_number"></stringProp>
                              </RegexExtractor>
                              <hashTree/>
                            </hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Session Event Retry" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">{&#xd;
              &#xd;
              &quot;SessionId&quot; :  &quot;${PostAcceptSessionId}&quot;,&#xd;
              &quot;ClientSessionEvent&quot; : &quot;705&quot;,&#xd;
              &quot;LiveWorkItemId&quot; : &quot;${PostAcceptLiveWorkItemId}&quot;,&#xd;
              &quot;Payload&quot; : {&#xd;
         					&quot;AgentId&quot;: &quot;${TransferAgentId}&quot;,&#xd;
         					&quot;AgentAadID&quot;: &quot;${TransferAgentAADId}&quot;,&#xd;
			              	&quot;AgentName&quot; : &quot;${TransferAgentName}&quot;&#xd;
		              	 }&#xd;
}</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
                                <collectionProp name="HeaderManager.headers">
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Content-Type</stringProp>
                                    <stringProp name="Header.value">application/json</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">TenantId</stringProp>
                                    <stringProp name="Header.value">${OrgId}</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">OrganizationId</stringProp>
                                    <stringProp name="Header.value">${OrgId}</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">ADUserId</stringProp>
                                    <stringProp name="Header.value">${AgentAdId}</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Authorization</stringProp>
                                    <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </HeaderManager>
                              <hashTree/>
                              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Call Response Status" enabled="true">
                                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                                <stringProp name="RegexExtractor.refname">TransferResponse</stringProp>
                                <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                                <stringProp name="RegexExtractor.template">$1$</stringProp>
                                <stringProp name="RegexExtractor.default"></stringProp>
                                <stringProp name="RegexExtractor.match_number"></stringProp>
                              </RegexExtractor>
                              <hashTree/>
                            </hashTree>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer Session telemetry call" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">{	&#xd;
	&quot;eventName&quot;:&quot;session_transfer&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${PostAcceptTransactionId}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;${PostAcceptLiveWorkItemId}&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;${PostAcceptSessionId}&quot;,&#xd;
	&quot;chatId&quot;:&quot;${PostAcceptChatId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${TransferResponse}&quot;,&#xd;
	&quot;transferredAgentId&quot;: &quot;${TransferAgentId}&quot;&#xd;
}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">localhost</stringProp>
                            <stringProp name="HTTPSampler.port">3000</stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">telemetry</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                          </hashTree>
                          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Remove Notification From Map" enabled="true">
                            <stringProp name="BeanShellSampler.query">String chatId = vars.get(&quot;PostAcceptChatId&quot;);
HashMap chatIdToNotificationMap = vars.getObject(&quot;chatIdToNotificationMap&quot;);
Notification notification = chatIdToNotificationMap.get(chatId);
String sessionId = notification.GetSessionId();
log.info(&quot;Removing sessionId: &quot; + sessionId + &quot; from map&quot;);
chatIdToNotificationMap.remove(chatId);</stringProp>
                            <stringProp name="BeanShellSampler.filename"></stringProp>
                            <stringProp name="BeanShellSampler.parameters"></stringProp>
                            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                          </BeanShellSampler>
                          <hashTree/>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If no agent found for transfer" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;AgentsFound&quot;) == &quot;0&quot;)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                          <boolProp name="IfController.useExpression">true</boolProp>
                        </IfController>
                        <hashTree>
                          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Move Notification to Active For Closing" enabled="true">
                            <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.ArrayList;

Notification traversedNotification = vars.getObject(&quot;traversedNotification&quot;);
NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);

log.info(&quot;Adding notifications for closing messages..&quot;);
int NotificationsAdded = notificationsQueue.AddActiveNotification(traversedNotification);
log.info(NotificationsAdded + &quot; of 1 traversed notifications added.&quot;);


</stringProp>
                            <stringProp name="BeanShellSampler.filename"></stringProp>
                            <stringProp name="BeanShellSampler.parameters"></stringProp>
                            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                          </BeanShellSampler>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;typeOfPostAcceptAction&quot;) == &quot;TransferToQueue&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Queues For Transfer" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">wds/omniqueues</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Response Status" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">GetQueuesResponse</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">TenantId</stringProp>
                                <stringProp name="Header.value">${TenantId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">OrganizationId</stringProp>
                                <stringProp name="Header.value">${OrgId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">ADUserId</stringProp>
                                <stringProp name="Header.value">${AgentAdId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract Queues Information" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.util.ArrayList;
import java.net.URLEncoder;
import NotificationsQueue;
import Notification;
log.info(&quot;GetQueuesResponse: &quot; + vars.get(&quot;GetQueuesResponse&quot;));

Integer queuesFound = 0;

if(vars.get(&quot;GetQueuesResponse&quot;).equals(&quot;200&quot;))
{
	String responseStr = prev.getResponseDataAsString();
	JSONParser parser = new JSONParser();
	log.info(&quot;pass1&quot;);
	log.info(&quot;responseStr is: &quot; + responseStr);
	log.info(&quot;pass2&quot;);
	JSONArray response = (JSONArray)parser.parse(responseStr);
	log.info(&quot;pass3&quot;);
	queuesFound = response.size();
	if(queuesFound &gt; 0)
	{
		Random rand = new Random();
		int index = rand.nextInt(response.size());
		JSONObject queueObj = (JSONObject)response.get(index);
		String queueId = (String)queueObj.get(&quot;queueid&quot;);
		
		log.info(&quot;TransferQueueId: &quot; + queueId);
		vars.put(&quot;TransferQueueId&quot;, queueId);
	}

	vars.put(&quot;QueuesFound&quot;, queuesFound.toString());
}

</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If queues found for transfer" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;QueuesFound&quot;) != &quot;0&quot;)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                          <boolProp name="IfController.useExpression">true</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer To Queue Session Event" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">{&#xd;
              &#xd;
              &quot;SessionId&quot; :  &quot;${PostAcceptSessionId}&quot;,&#xd;
              &quot;ClientSessionEvent&quot; : &quot;706&quot;,&#xd;
              &quot;LiveWorkItemId&quot; : &quot;${PostAcceptLiveWorkItemId}&quot;,&#xd;
              &quot;Payload&quot; : {&#xd;
	         					&quot;QueueId&quot;: &quot;${TransferQueueId}&quot;&#xd;
              }&#xd;
}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Transfer Session Response Extractor" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                              <stringProp name="RegexExtractor.refname">TransferToQueueResponse</stringProp>
                              <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">TenantId</stringProp>
                                  <stringProp name="Header.value">${TenantId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">OrganizationId</stringProp>
                                  <stringProp name="Header.value">${OrgId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">ADUserId</stringProp>
                                  <stringProp name="Header.value">${AgentAdId}</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                              <stringProp name="RegexExtractor.refname">PostAcceptTransactionId</stringProp>
                              <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default"></stringProp>
                              <stringProp name="RegexExtractor.match_number"></stringProp>
                            </RegexExtractor>
                            <hashTree/>
                          </hashTree>
                          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check for OC Token Failure" enabled="true">
                            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;TransferToQueueResponse&quot;) != &quot;200&quot;)}</stringProp>
                            <boolProp name="IfController.evaluateAll">false</boolProp>
                            <boolProp name="IfController.useExpression">true</boolProp>
                          </IfController>
                          <hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken after accept event failure" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid&amp;client_secret=${clientsecret}</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
                              <stringProp name="HTTPSampler.method">GET</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="OC Token HTTP Cookie" enabled="true">
                                <collectionProp name="CookieManager.cookies"/>
                                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                              </CookieManager>
                              <hashTree/>
                              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="OC Token HTTP Header" enabled="true">
                                <collectionProp name="HeaderManager.headers">
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Accept</stringProp>
                                    <stringProp name="Header.value">application/json</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">client-request-id</stringProp>
                                    <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Content-Type</stringProp>
                                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </HeaderManager>
                              <hashTree/>
                              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract OC Token" enabled="true">
                                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                <stringProp name="RegexExtractor.refname">ocToken</stringProp>
                                <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                                <stringProp name="RegexExtractor.template">$1$</stringProp>
                                <stringProp name="RegexExtractor.default"></stringProp>
                                <stringProp name="RegexExtractor.match_number"></stringProp>
                              </RegexExtractor>
                              <hashTree/>
                            </hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer to Queue Session Event Retry" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">{&#xd;
              &#xd;
              &quot;SessionId&quot; :  &quot;${PostAcceptSessionId}&quot;,&#xd;
              &quot;ClientSessionEvent&quot; : &quot;706&quot;,&#xd;
              &quot;LiveWorkItemId&quot; : &quot;${PostAcceptLiveWorkItemId}&quot;,&#xd;
              &quot;Payload&quot; : {&#xd;
	         					&quot;QueueId&quot;: &quot;${TransferToQueueResponse}&quot;&#xd;
              }&#xd;
}</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Manager" enabled="true">
                                <collectionProp name="HeaderManager.headers">
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Content-Type</stringProp>
                                    <stringProp name="Header.value">application/json</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">TenantId</stringProp>
                                    <stringProp name="Header.value">${OrgId}</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">OrganizationId</stringProp>
                                    <stringProp name="Header.value">${OrgId}</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">ADUserId</stringProp>
                                    <stringProp name="Header.value">${AgentAdId}</stringProp>
                                  </elementProp>
                                  <elementProp name="" elementType="Header">
                                    <stringProp name="Header.name">Authorization</stringProp>
                                    <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </HeaderManager>
                              <hashTree/>
                              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Call Response Status" enabled="true">
                                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                                <stringProp name="RegexExtractor.refname">TransferToQueueResponse</stringProp>
                                <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                                <stringProp name="RegexExtractor.template">$1$</stringProp>
                                <stringProp name="RegexExtractor.default"></stringProp>
                                <stringProp name="RegexExtractor.match_number"></stringProp>
                              </RegexExtractor>
                              <hashTree/>
                            </hashTree>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transfer To Queue Session telemetry call" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">{	&#xd;
	&quot;eventName&quot;:&quot;session_transfertoqueue&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${PostAcceptTransactionId}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;${PostAcceptLiveWorkItemId}&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;${PostAcceptSessionId}&quot;,&#xd;
	&quot;chatId&quot;:&quot;${PostAcceptChatId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${TransferToQueueResponse}&quot;,&#xd;
	&quot;transferredQueueId&quot;: &quot;${TransferQueueId}&quot;&#xd;
}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">localhost</stringProp>
                            <stringProp name="HTTPSampler.port">3000</stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">telemetry</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                          </hashTree>
                          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Remove Notification From Map" enabled="true">
                            <stringProp name="BeanShellSampler.query">String chatId = vars.get(&quot;PostAcceptChatId&quot;);
HashMap chatIdToNotificationMap = vars.getObject(&quot;chatIdToNotificationMap&quot;);
Notification notification = chatIdToNotificationMap.get(chatId);
String sessionId = notification.GetSessionId();
log.info(&quot;Removing sessionId: &quot; + sessionId + &quot; from map&quot;);
chatIdToNotificationMap.remove(chatId);</stringProp>
                            <stringProp name="BeanShellSampler.filename"></stringProp>
                            <stringProp name="BeanShellSampler.parameters"></stringProp>
                            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                          </BeanShellSampler>
                          <hashTree/>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If no queue found for transfer" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;QueuesFound&quot;) == &quot;0&quot;)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                          <boolProp name="IfController.useExpression">true</boolProp>
                        </IfController>
                        <hashTree>
                          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Move Notification to Active For Closing" enabled="true">
                            <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.ArrayList;

Notification traversedNotification = vars.getObject(&quot;traversedNotification&quot;);
NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);

log.info(&quot;Adding notifications for closing messages..&quot;);
int NotificationsAdded = notificationsQueue.AddActiveNotification(traversedNotification);
log.info(NotificationsAdded + &quot; of 1 traversed notifications added.&quot;);


</stringProp>
                            <stringProp name="BeanShellSampler.filename"></stringProp>
                            <stringProp name="BeanShellSampler.parameters"></stringProp>
                            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                          </BeanShellSampler>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Remove Notifications from cache" enabled="true">
                      <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.ArrayList;

ArrayList traversedNotifications = vars.getObject(&quot;traversedNotifications&quot;);

for(int i=0; i&lt;traversedNotifications.size(); i++)
{
	vars.remove(&quot;traversedNotification_&quot;+(i+1));
}



</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Close Controller" enabled="true"/>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(Boolean.toString(vars.getObject(&quot;notificationsQueue&quot;).CanClose()) == &quot;true&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Active Notifications" enabled="true">
                      <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.List;
import java.util.ArrayList;

NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);

ArrayList activeNotifications = notificationsQueue.GetActiveNotifications();

for(int i=0; i&lt;activeNotifications.size(); i++)
{
	vars.putObject(&quot;activeNotification_&quot;+(i+1), activeNotifications.get(i));
}

vars.putObject(&quot;activeNotifications&quot;, activeNotifications);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Active Notification" enabled="true">
                      <stringProp name="ForeachController.inputVal">activeNotification</stringProp>
                      <stringProp name="ForeachController.returnVal">activeNotification</stringProp>
                      <boolProp name="ForeachController.useSeparator">true</boolProp>
                    </ForeachController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set CurrentSessionId" enabled="true">
                        <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.List;
import java.util.ArrayList;

Notification activeNotification = vars.getObject(&quot;activeNotification&quot;);

String closeSessionId = activeNotification.GetSessionId();
String closeLiveWorkItemId = activeNotification.GetLiveWorkItemId();
String closeChatId = activeNotification.GetChatId();

Integer sentMessagesCount = activeNotification.GetSentMessagesCount();
Integer receivedMessagesCount = activeNotification.GetReceivedMessagesCount();

String receivedMessagesCsv = &quot;&quot;;
ArrayList receivedMessages = activeNotification.GetReceivedMessages();
for(int i=0; i&lt;receivedMessagesCount; i++)
{
	receivedMessagesCsv += &quot;|&quot; + receivedMessages.get(i);
}

String sentMessagesCsv = &quot;&quot;;
ArrayList sentMessages = activeNotification.GetSentMessages();
for(int i=0; i&lt;sentMessagesCount; i++)
{
	sentMessagesCsv += &quot;|&quot; + sentMessages.get(i);
}


vars.put(&quot;CloseSessionId&quot;, closeSessionId);
vars.put(&quot;CloseLiveWorkItemId&quot;, closeLiveWorkItemId);
vars.put(&quot;CloseChatId&quot;, closeChatId);
vars.put(&quot;SentMessagesCount&quot;, sentMessagesCount.toString());
vars.put(&quot;ReceivedMessagesCount&quot;, receivedMessagesCount.toString());
vars.put(&quot;ReceivedMessages&quot;, receivedMessagesCsv);
vars.put(&quot;SentMessages&quot;, sentMessagesCsv);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="End Session Event" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
              &#xd;
              &quot;SessionId&quot; :  &quot;${CloseSessionId}&quot;,&#xd;
              &quot;ClientSessionEvent&quot; : &quot;713&quot;,&#xd;
              &quot;LiveWorkItemId&quot; : &quot;${CloseLiveWorkItemId}&quot;,&#xd;
              &quot;Payload&quot; : {&quot;AgentId&quot;: &quot;${AgentId}&quot;}&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response Status" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">EndSessionResponse</stringProp>
                          <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">TenantId</stringProp>
                              <stringProp name="Header.value">${TenantId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">OrganizationId</stringProp>
                              <stringProp name="Header.value">${OrgId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ADUserId</stringProp>
                              <stringProp name="Header.value">${AgentAdId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">EndTransactionId</stringProp>
                          <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check for OC Token Failure" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;CloseSessionResponse&quot;) != &quot;200&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken after close event failure" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid&amp;client_secret=${clientsecret}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="OC Token HTTP Cookie" enabled="true">
                            <collectionProp name="CookieManager.cookies"/>
                            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                          </CookieManager>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="OC Token HTTP Header" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">client-request-id</stringProp>
                                <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract OC Token" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">ocToken</stringProp>
                            <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Session Event Retry" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
              &#xd;
              &quot;SessionId&quot; :  &quot;${CloseSessionId}&quot;,&#xd;
              &quot;ClientSessionEvent&quot; : &quot;700&quot;,&#xd;
              &quot;LiveWorkItemId&quot; : &quot;${CloseLiveWorkItemId}&quot;,&#xd;
              &quot;Payload&quot; : {&quot;AgentId&quot;: &quot;${AgentId}&quot;}&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response Status" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">CloseSessionResponse</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">TenantId</stringProp>
                                <stringProp name="Header.value">${TenantId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">OrganizationId</stringProp>
                                <stringProp name="Header.value">${OrgId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">ADUserId</stringProp>
                                <stringProp name="Header.value">${AgentAdId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">CloseTransactionId</stringProp>
                            <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="End Session telemetry call" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;session_end&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${CloseTransactionId}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;${CloseLiveWorkItemId}&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;${CloseSessionId}&quot;,&#xd;
	&quot;chatId&quot;:&quot;${CloseChatId}&quot;,&#xd;
	&quot;sentMsgCount&quot;:&quot;${SentMessagesCount}&quot;,&#xd;
	&quot;receivedMsgCount&quot;:&quot;${ReceivedMessagesCount}&quot;,&#xd;
	&quot;sentMsgCsv&quot;:&quot;${SentMessages}&quot;,&#xd;
	&quot;receivedMsgCsv&quot;:&quot;${ReceivedMessages}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${EndSessionResponse}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay between end and close session" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">5000</stringProp>
                      </TestAction>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Session Event" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
              &#xd;
              &quot;SessionId&quot; :  &quot;${CloseSessionId}&quot;,&#xd;
              &quot;ClientSessionEvent&quot; : &quot;700&quot;,&#xd;
              &quot;LiveWorkItemId&quot; : &quot;${CloseLiveWorkItemId}&quot;,&#xd;
              &quot;Payload&quot; : {&quot;AgentId&quot;: &quot;${AgentId}&quot;}&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response Status" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">CloseSessionResponse</stringProp>
                          <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">TenantId</stringProp>
                              <stringProp name="Header.value">${TenantId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">OrganizationId</stringProp>
                              <stringProp name="Header.value">${OrgId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ADUserId</stringProp>
                              <stringProp name="Header.value">${AgentAdId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">CloseTransactionId</stringProp>
                          <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check for OC Token Failure" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;CloseSessionResponse&quot;) != &quot;200&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken after close event failure" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid&amp;client_secret=${clientsecret}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="OC Token HTTP Cookie" enabled="true">
                            <collectionProp name="CookieManager.cookies"/>
                            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                          </CookieManager>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="OC Token HTTP Header" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">client-request-id</stringProp>
                                <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract OC Token" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">ocToken</stringProp>
                            <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Session Event Retry" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
              &#xd;
              &quot;SessionId&quot; :  &quot;${CloseSessionId}&quot;,&#xd;
              &quot;ClientSessionEvent&quot; : &quot;700&quot;,&#xd;
              &quot;LiveWorkItemId&quot; : &quot;${CloseLiveWorkItemId}&quot;,&#xd;
              &quot;Payload&quot; : {&quot;AgentId&quot;: &quot;${AgentId}&quot;}&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response Status" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">CloseSessionResponse</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">TenantId</stringProp>
                                <stringProp name="Header.value">${TenantId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">OrganizationId</stringProp>
                                <stringProp name="Header.value">${OrgId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">ADUserId</stringProp>
                                <stringProp name="Header.value">${AgentAdId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">CloseTransactionId</stringProp>
                            <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Session telemetry call" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;session_close&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${CloseTransactionId}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;${CloseLiveWorkItemId}&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;${CloseSessionId}&quot;,&#xd;
	&quot;chatId&quot;:&quot;${CloseChatId}&quot;,&#xd;
	&quot;sentMsgCount&quot;:&quot;${SentMessagesCount}&quot;,&#xd;
	&quot;receivedMsgCount&quot;:&quot;${ReceivedMessagesCount}&quot;,&#xd;
	&quot;sentMsgCsv&quot;:&quot;${SentMessages}&quot;,&#xd;
	&quot;receivedMsgCsv&quot;:&quot;${ReceivedMessages}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${CloseSessionResponse}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Remove Notification From Map" enabled="true">
                        <stringProp name="BeanShellSampler.query">String chatId = vars.get(&quot;CloseChatId&quot;);
HashMap chatIdToNotificationMap = vars.getObject(&quot;chatIdToNotificationMap&quot;);
Notification notification = chatIdToNotificationMap.get(chatId);
String sessionId = notification.GetSessionId();
log.info(&quot;Removing sessionId: &quot; + sessionId + &quot; from map&quot;);
chatIdToNotificationMap.remove(chatId);
</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Remove Notifications from cache" enabled="true">
                      <stringProp name="BeanShellSampler.query">import java.util.ArrayList;

ArrayList activeNotifications = vars.getObject(&quot;activeNotifications&quot;);

for(int i=0; i&lt;activeNotifications.size(); i++)
{
	vars.remove(&quot;activeNotification_&quot;+(i+1));
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Timeout Controller" enabled="true"/>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">${__BeanShell(Boolean.toString(vars.getObject(&quot;notificationsQueue&quot;).CanTimeout()) == &quot;true&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Timedout Notifications" enabled="true">
                      <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.List;
import java.util.ArrayList;

NotificationsQueue notificationsQueue = vars.getObject(&quot;notificationsQueue&quot;);

ArrayList timedoutNotifications = notificationsQueue.GetTimedoutNotifications();

for(int i=0; i&lt;timedoutNotifications.size(); i++)
{
	vars.putObject(&quot;timedoutNotification_&quot;+(i+1), timedoutNotifications.get(i));
}

vars.putObject(&quot;timedoutNotifications&quot;, timedoutNotifications);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Timedout Notification" enabled="true">
                      <stringProp name="ForeachController.inputVal">timedoutNotification</stringProp>
                      <stringProp name="ForeachController.returnVal">timedoutNotification</stringProp>
                      <boolProp name="ForeachController.useSeparator">true</boolProp>
                    </ForeachController>
                    <hashTree>
                      <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set CurrentSessionId" enabled="true">
                        <stringProp name="BeanShellSampler.query">import NotificationsQueue;
import Notification;
import java.util.List;
import java.util.ArrayList;

Notification timedoutNotification = vars.getObject(&quot;timedoutNotification&quot;);

String timeoutSessionId = timedoutNotification.GetSessionId();
String timeoutLiveWorkItemId = timedoutNotification.GetLiveWorkItemId();
String timeoutChatId = timedoutNotification.GetChatId();


vars.put(&quot;TimeoutSessionId&quot;, timeoutSessionId);
vars.put(&quot;TimeoutLiveWorkItemId&quot;, timeoutLiveWorkItemId);
vars.put(&quot;TimeoutChatId&quot;, timeoutChatId);</stringProp>
                        <stringProp name="BeanShellSampler.filename"></stringProp>
                        <stringProp name="BeanShellSampler.parameters"></stringProp>
                        <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                      </BeanShellSampler>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Timeout Session Event" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
              &#xd;
            &quot;SessionId&quot; :  &quot;${TimeoutSessionId}&quot;,&#xd;
            &quot;ClientSessionEvent&quot; : &quot;704&quot;,&#xd;
            &quot;LiveWorkItemId&quot; : &quot;${TimeoutLiveWorkItemId}&quot;,&#xd;
            &quot;Payload&quot; : {&quot;AgentId&quot;: &quot;${AgentId}&quot;}&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response Status" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">TimeoutSessionResponse</stringProp>
                          <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Event Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">TenantId</stringProp>
                              <stringProp name="Header.value">${TenantId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">OrganizationId</stringProp>
                              <stringProp name="Header.value">${OrgId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ADUserId</stringProp>
                              <stringProp name="Header.value">${AgentAdId}</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                          <stringProp name="RegexExtractor.refname">TimeoutTransactionId</stringProp>
                          <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default"></stringProp>
                          <stringProp name="RegexExtractor.match_number"></stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check for OC Token Failure" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;TimeoutSessionResponse&quot;) != &quot;200&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetOCToken after accept event failure" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">resource=https%3A%2F%2Fmicrosoft.onmicrosoft.com/${backendappid}&amp;client_id=${occlientappid}&amp;grant_type=password&amp;username=${username}%40${tenant}&amp;password=${agentpassword}&amp;scope=openid&amp;client_secret=${clientsecret}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${ocauthuri}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${ocauthuripath}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="OC Token HTTP Cookie" enabled="true">
                            <collectionProp name="CookieManager.cookies"/>
                            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                          </CookieManager>
                          <hashTree/>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="OC Token HTTP Header" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">client-request-id</stringProp>
                                <stringProp name="Header.value">e84b268a-af2d-4bba-9543-21839fefb41e</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract OC Token" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">ocToken</stringProp>
                            <stringProp name="RegexExtractor.regex">access_token&quot;:&quot;(.+?)&quot;,</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Timeout Session Event Retry" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
              &#xd;
            &quot;SessionId&quot; :  &quot;${TimeoutSessionId}&quot;,&#xd;
            &quot;ClientSessionEvent&quot; : &quot;704&quot;,&#xd;
            &quot;LiveWorkItemId&quot; : &quot;${TimeoutLiveWorkItemId}&quot;,&#xd;
            &quot;Payload&quot; : {&quot;AgentId&quot;: &quot;${AgentId}&quot;}&#xd;
}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${apimpath}</stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">clientui/clientsessionevent</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">TenantId</stringProp>
                                <stringProp name="Header.value">${OrgId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">OrganizationId</stringProp>
                                <stringProp name="Header.value">${OrgId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">ADUserId</stringProp>
                                <stringProp name="Header.value">${AgentAdId}</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">Bearer ${ocToken}</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response Status" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">TimeoutSessionResponse</stringProp>
                            <stringProp name="RegexExtractor.regex">HTTP\/1.1 (.+?) </stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Transaction Id" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                            <stringProp name="RegexExtractor.refname">TimeoutTransactionId</stringProp>
                            <stringProp name="RegexExtractor.regex">Transaction-Id: (....................................+?)</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default"></stringProp>
                            <stringProp name="RegexExtractor.match_number"></stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Timeout Session telemetry call" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{	&#xd;
	&quot;eventName&quot;:&quot;session_timeout&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;${TimeoutTransactionId}&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;${TimeoutLiveWorkItemId}&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentAdId&quot;:&quot;${AgentAdId}&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;${TimeoutSessionId}&quot;,&#xd;
	&quot;chatId&quot;:&quot;${TimeoutChatId}&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${TimeoutSessionResponse}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">localhost</stringProp>
                        <stringProp name="HTTPSampler.port">3000</stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">telemetry</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Clear Timedout Notification List" enabled="true">
                      <stringProp name="BeanShellSampler.query">import java.util.ArrayList;

ArrayList timedoutNotifications = vars.getObject(&quot;timedoutNotifications&quot;);

for(int i=0; i&lt;timedoutNotifications.size(); i++)
{
	vars.remove(&quot;timedoutNotification_&quot;+(i+1));
}</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WebSocket flow if UseSignalR true" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;UseSignalR&quot;) == &quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Close WebSocket Connection - ABS" enabled="true"/>
          <hashTree>
            <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="WebSocket Text Frame Filter" enabled="true">
              <stringProp name="comparisonType">IsPlain</stringProp>
              <stringProp name="TestPlan.comments">filters (i.e. discards) all ws text frames that are received by sampler in its scope</stringProp>
              <stringProp name="matchValue"></stringProp>
            </eu.luminis.jmeter.wssampler.TextFrameFilter>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.PingFrameFilter guiclass="eu.luminis.jmeter.wssampler.PingFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.PingFrameFilter" testname="Ping Frame Filter" enabled="true">
              <boolProp name="replyToPing">false</boolProp>
              <stringProp name="TestPlan.comments">This filter will receive the ping (and hide it for the read sampler) and reply with a pong.</stringProp>
              <stringProp name="filterType">FilterAll</stringProp>
            </eu.luminis.jmeter.wssampler.PingFrameFilter>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="true">
              <stringProp name="TestPlan.comments">(filtered frames will show up as sub-result)</stringProp>
              <stringProp name="statusCode">1000</stringProp>
              <stringProp name="readTimeout">6000</stringProp>
            </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="WebSocket Close Status" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;WebSocketCloseStatus&quot;, prev.getResponseCode());

log.info(&quot;Websocket close status: &quot; + vars.get(&quot;WebSocketCloseStatus&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract WebSocket Close Response" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String responseStr = prev.getResponseDataAsString();

vars.put(&quot;WebSocketCloseResponse&quot;, responseStr);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WebSocket Close Telemetry Call" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;eventName&quot;:&quot;signalr_telemetry&quot;,&#xd;
	&quot;eventType&quot;:&quot;websocket_close&quot;,&#xd;
	&quot;runId&quot;:&quot;${testRunId}&quot;,&#xd;
	&quot;transactionId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkitemId&quot;:&quot;&quot;,&#xd;
	&quot;liveworkstreamId&quot;:&quot;&quot;,&#xd;
	&quot;agentId&quot;:&quot;${AgentId}&quot;,&#xd;
	&quot;transferConsultObjectId&quot;:&quot;&quot;,&#xd;
	&quot;orgId&quot;:&quot;${OrgId}&quot;,&#xd;
	&quot;ocsessionId&quot;:&quot;&quot;,&#xd;
	&quot;rstatus&quot;: &quot;${WebSocketCloseStatus}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">localhost</stringProp>
              <stringProp name="HTTPSampler.port">3000</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">telemetry</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
